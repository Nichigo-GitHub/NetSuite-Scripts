
/**/**
 * @NApiVersion 2.x
 * @NScriptType BundleInstallationScript
 */
define(['N/search','N/record','N/runtime','N/file','N/task','N/query'],
		function (search,record,runtime,file,task,query) {

	/**
	 *updates the  default values for mobile bundle
	 */
	function doBundleUpdates(requestBody) {
		log.debug({title:'BundleUpdates',details:requestBody});
		systemRulesUpdate();
		//hideMenus();
		MenusDisplayForUpdates();
		mobileBundleRegisteredAppUpdate();
		autoPrintRuleDataCreate();
		updateUccLabelTemplateData();
		checkPlatformCartonFieldsEnablement();
		ASNDeploymentUpdate();
		migrateWMSWaveFields();
		hideAutogeneratedIDFormatFields();


	}

	function doBundleAfterInstall(requestBody) {
		log.debug({title:'AfterInstall',details:requestBody});
		//systemRulesUpdate();
		//hideOldMenusforNewInstallOnly();
		MenusDisplayForNewInstall();
		mobileBundleRegisteredAppUpdate();
		autoPrintRuleDataCreate();
		checkPlatformCartonFieldsEnablement();
		ASNDeploymentUpdate();
		hideAutogeneratedIDFormatFields();
	}
	
	function MenusDisplayForNewInstall(){
	
		try
		{			
			var isEnabled=isWarehousemanagementFeatureEnabled();
			if(isEnabled)
			{
				log.debug({title:'feature enabled new install',details:isEnabled});
				var oldMenuDisplayFlag = false;
				oldMenusDisplayOnWarehouseMgmtFeature(oldMenuDisplayFlag,!oldMenuDisplayFlag);
				newMenusDisplayOnWarehouseMgmtFeature(isEnabled);
				updateMRScriptDeploymentConcurrencyLimit();
				updateUEScriptDeploymentsToInactive();
			
			}
			else
			{
				//so nothing is displayed here as per excel
				//by default through bundle ,old and new are displayed but make it as false
				var oldMenuDisplayFlag = false;
				oldMenusDisplayOnWarehouseMgmtFeature(oldMenuDisplayFlag,!oldMenuDisplayFlag);
				newMenusDisplayOnWarehouseMgmtFeature(oldMenuDisplayFlag);
			}
			
		}
		catch(e)
		{
				log.error({title:'error in  MenusDisplayForNewInstall',details:e});
		}
	}
	function checkPlatformCartonFieldsEnablement(){
		try{	
			var isWMSCartonFieldsSettingRecordExists = search.create({
				type: 'customrecord_wms_carton_field_setting',
				columns: [
					{name: 'custrecord_populate_platformcarton_field'}
					]
			});

			var	 wmsCartonRecordList = isWMSCartonFieldsSettingRecordExists.run().getRange({
				start: 0,
				end: 1
			});
			if(wmsCartonRecordList == undefined || wmsCartonRecordList ==null || wmsCartonRecordList == 'null' ||
					wmsCartonRecordList =='' || wmsCartonRecordList.length == 0){
				createDataWithDefaultInWMSCartonDataSettingsRecord();
			}
			hideCustomCartonStageFields();
		}
		catch(e)
		{
			log.error({title:'error in  checkPlatformCartonFieldsEnablement',details:e});
		}
	}
	function createDataWithDefaultInWMSCartonDataSettingsRecord(){
		var newRecord = record.create({type:'customrecord_wms_carton_field_setting'});							
		newRecord.setValue({fieldId:'custrecord_populate_platformcarton_field',value:true});
		newRecord.save();
	}
	function hideCustomCartonStageFields(){
		
		try
		{			
			var customFieldsArray = ['custrecord_wms_pickcarton','custrecord_wmsse_packing_container','custrecord_wmsse_staged'];
			
			for(var customFieldIndex in customFieldsArray){
				var customFieldScriptID = customFieldsArray[customFieldIndex];

				var customFieldInternalIdQuery = query.create({type: query.Type.CUSTOM_FIELD});
				customFieldInternalIdQuery.columns = [customFieldInternalIdQuery.createColumn({fieldId: 'internalid'})];
				customFieldInternalIdQuery.condition = customFieldInternalIdQuery.createCondition({
					fieldId: 'scriptid',
					operator: query.Operator.IS,
					values: customFieldScriptID
				});
				var results = customFieldInternalIdQuery.run().results;
				var customFieldInternalId = results[0].values[0];

				var customFieldSearch = record.load({
					type: 'OtherCustomField',
					id: customFieldInternalId 
				});
				customFieldSearch.setValue({
					fieldId:'displaytype',
					value:'HIDDEN'
				});
				customFieldSearch .save();
			}
			
		}
		catch(e)
		{
				log.error({title:'error in  hideCustomCartonStageFields',details:e});
		}
	}

	function migrateWMSWaveFields(){
		try
		{		
			var scriptId = 'customscript_wms_waverelease_migration';
			var deploymentId = 'customdeploy_wms_waverelease_migration';
			var scheduledScriptTask = task.create({
				taskType: task.TaskType.SCHEDULED_SCRIPT,
				scriptId: scriptId,
				deploymentId: deploymentId
			});

			scheduledScriptTask.submit();
		}
		catch(e)
		{
			log.error({title:'error in  scheduleTask',details:e});
		}
	}

	function hideAutogeneratedIDFormatFields()
	{
	    try {
            var customFieldsArray = ['custrecord_wmsse_lprange_site', 'custrecord_wmsse_companys', 'custrecord_wmsse_carrier', 'custrecord_wmsse_lprange_end', 'custrecord_wmsse_lprange_lpgen_type'];

            for (var customFieldIndex in customFieldsArray) {
                var customFieldScriptID = customFieldsArray[customFieldIndex];

                var customFieldInternalIdQuery = query.create({type: query.Type.CUSTOM_FIELD});
                customFieldInternalIdQuery.columns = [customFieldInternalIdQuery.createColumn({fieldId: 'internalid'})];
                customFieldInternalIdQuery.condition = customFieldInternalIdQuery.createCondition({
                    fieldId: 'scriptid',
                    operator: query.Operator.IS,
                    values: customFieldScriptID
                });
                var results = customFieldInternalIdQuery.run().results;
                if (results.length > 0) {
                    var customFieldInternalId = results[0].values[0];

                    var customFieldSearch = record.load({
                        type: 'customrecordcustomfield',
                        id: customFieldInternalId
                    });
                    customFieldSearch.setValue({
                        fieldId: 'inactive',
                        value: true
                    });
                    customFieldSearch.save();
                }
            }
        }
        catch(e)
        {
            log.error({title:'error in  hideAutogeneratedIDFormatFields',details:e});
        }
	}

	function MenusDisplayForUpdates(){
	
		try
		{			
			var isEnabled=isWarehousemanagementFeatureEnabled();
			if(isEnabled)
			{
				log.debug({title:'feature enabled update',details:isEnabled});
				var oldMenuDisplayFlag = false;
				oldMenusDisplayOnWarehouseMgmtFeature(oldMenuDisplayFlag,!oldMenuDisplayFlag);
				newMenusDisplayOnWarehouseMgmtFeature(isEnabled);
				updateMRScriptDeploymentConcurrencyLimit();
				updateUEScriptDeploymentsToInactive();
			
			}
			else
			{
				log.debug({title:'feature enabled update',details:isEnabled});
				var oldMenuDisplayFlag = true;
				oldMenusDisplayOnWarehouseMgmtFeature(oldMenuDisplayFlag,!oldMenuDisplayFlag);//sceanrio:whether the customer is NEW/OLD bundle if updates the bundle without enable warehouse management feature then OLD menu only will display.same applicable for SS roles also
				newMenusDisplayOnWarehouseMgmtFeature(isEnabled);
						
			}
					
		}
		catch(e)
		{
				log.error({title:'error in  MenusDisplayForUpdates',details:e});
		}
	}


	function getBundleId(){
		
		var script = runtime.getCurrentScript();
		var bundleIdStr = script.bundleIds;
		var bundlesCount = bundleIdStr.length ;
		var bundleId;
		log.debug({title:'bundleIdStr',details:bundleIdStr});
		if(bundlesCount > 1){
			var oldbundleId  = bundleIdStr[0];
			var latestBundleId = bundleIdStr[bundlesCount - 1];
			if(parseInt(latestBundleId)>parseInt(oldbundleId)){
				bundleId =  latestBundleId;
			}
			else{
				bundleId =  bundleIdStr;
			}
		}
		else{
			bundleId=script.bundleIds;
		}
		log.debug({title:'bundleId',details:bundleId});

		return bundleId;
	}
	function systemRulesUpdate(){
		
		try{
			 
			var wmsTempSystemRulesSearchResult = getTempSystemRules();
			log.error({title:'wmsTempSystemRulesSearchResult',details:wmsTempSystemRulesSearchResult});
			
			if(wmsTempSystemRulesSearchResult.length > 0)	{
				
				var wmsSystemRulesSearchResult = getSystemRules();
				var isMultiLanguageFeatureEnabled = isMultiLanguageEnabled();
				for(var i=0;i<wmsTempSystemRulesSearchResult.length;i++){

					if(wmsSystemRulesSearchResult.length > 0){

                        var wmsTempSystemRulesSearchResult_name = wmsTempSystemRulesSearchResult[i].getValue({name:'name'});
                        var wmsTempSystemRulesSearchResult_oldname = wmsTempSystemRulesSearchResult[i].getValue({name:'custrecord_wms_oldname'});
						var wmsTempSystemRulesSearchResult_newname = wmsTempSystemRulesSearchResult[i].getValue({name:'custrecord_wms_newname'});
						var wmsTempSystemRulesSearchResult_newdesc = wmsTempSystemRulesSearchResult[i].getValue({name:'custrecord_wms_new_description'});
                        var wmsTempSystemRulesSearchResult_olddesc = wmsTempSystemRulesSearchResult[i].getValue({name:'custrecord_wms_old_description'});
						var isNewSystemRule = true;
						
						for(var k=0;k<wmsSystemRulesSearchResult.length;k++){

							var wmsSystemRulesSearchResult_name = wmsSystemRulesSearchResult[k].getValue({name:'name'});
                            var wmsSystemRulesSearchResult_description = wmsSystemRulesSearchResult[k].getValue({name:'custrecord_wmssedescription'});
							var wmsSystemRulesSearchResult_systemruleid=wmsSystemRulesSearchResult[k].id;
							
							if(wmsTempSystemRulesSearchResult_oldname == wmsSystemRulesSearchResult_name &&
                                wmsTempSystemRulesSearchResult_newname != wmsSystemRulesSearchResult_name){
								
								isNewSystemRule = false;
								updateSystemRule(wmsSystemRulesSearchResult_systemruleid,wmsTempSystemRulesSearchResult_newname,
										wmsTempSystemRulesSearchResult_newdesc,wmsTempSystemRulesSearchResult[i].id,isMultiLanguageFeatureEnabled);
								break;
							} else if(wmsTempSystemRulesSearchResult_name == wmsSystemRulesSearchResult_name && wmsTempSystemRulesSearchResult_newdesc != wmsTempSystemRulesSearchResult_olddesc) {
                                isNewSystemRule = false;
                                updateSystemRule(wmsSystemRulesSearchResult_systemruleid,wmsTempSystemRulesSearchResult_name,
                                    wmsTempSystemRulesSearchResult_newdesc,wmsTempSystemRulesSearchResult[i].id,false);
                                break;
                            }else if(wmsTempSystemRulesSearchResult_newname  == wmsSystemRulesSearchResult_name){
										
										isNewSystemRule = false;
										if(isMultiLanguageFeatureEnabled){
										var wmsSystemRuleRec = record.load({type:'customrecord_wmsse_sysrules',
											id:wmsSystemRulesSearchResult_systemruleid
										});
										var wmsTempSystemRulesRec = record.load({type:'customrecord_wms_temp_sysrules',
											id:wmsTempSystemRulesSearchResult[i].id,
											isDynamic: true
										});
										insertDataInTransalationTab(wmsTempSystemRulesRec,wmsSystemRuleRec);
										wmsSystemRuleRec.save();
										break;
									}
								}
							else{
								if(wmsTempSystemRulesSearchResult[i].getValue({name:'name'}) == wmsSystemRulesSearchResult_name){
									isNewSystemRule = false;
									break;
								}
							}

						}
						if(isNewSystemRule){
							//bundle Upgrade
							
							
							var wmsTempSystemRulesSearchResult_oldname=wmsTempSystemRulesSearchResult[i].getValue({name:'custrecord_wms_oldname'});
							var wmsTempSystemRulesSearchResult_newname=wmsTempSystemRulesSearchResult[i].getValue({name:'custrecord_wms_newname'});
							var wmsTempSystemRulesSearchResult_newdesc=wmsTempSystemRulesSearchResult[i].getValue({name:'custrecord_wms_new_description'});
							var wmsTempSystemRulesSearchResult_rulevalue=wmsTempSystemRulesSearchResult[i].getValue({name:'custrecord_wms_rulevalue'});
							var wmsTempSystemRulesSearchResult_ruletype=wmsTempSystemRulesSearchResult[i].getValue({name:'custrecord_wms_ruletype'});
							
							var wmsBarCodeProcessTypeId = -1;
							if(wmsTempSystemRulesSearchResult_newname == 'Enable Advanced Barcode Scanning'){
								var isCompositeBarCodeScanningUsingInThisAccount = checkCompositeBarCodeForEnableAdvancedBarcodeScanningSystemRule();

								if(isCompositeBarCodeScanningUsingInThisAccount){
									wmsBarCodeProcessTypeId = getCompositeId();
									wmsTempSystemRulesSearchResult_rulevalue = 'Y';
								}
							}
							
							createSystemRule(wmsTempSystemRulesSearchResult_newname,wmsTempSystemRulesSearchResult_newdesc,wmsTempSystemRulesSearchResult_rulevalue,
									wmsTempSystemRulesSearchResult_ruletype,wmsTempSystemRulesSearchResult[i].id,isMultiLanguageFeatureEnabled,wmsBarCodeProcessTypeId);

						}
					}
				}
				deleteTempSystemRules(wmsTempSystemRulesSearchResult);
			}
			

			

		}
		catch(e){
			log.error({title:'error in  systemRulesUpdate',details:e});
		}

	}
	function getCompositeId(){
		
		var wmsProcessTypeListSearch =  search.create({
			type:'customlist_wmsse_process_type',
			columns:[{
				name: 'name'}]
		});
		var	 wmsProcessTypeList = wmsProcessTypeListSearch.run().getRange({
			start: 0,
			end: 1000
		});
		var processTypeId = -1;

		if(wmsProcessTypeList != undefined && wmsProcessTypeList !=null && wmsProcessTypeList != 'null' &&
				wmsProcessTypeList !='' && wmsProcessTypeList.length > 0)
		{
			var strName ='Composite Bar Code';
			for(var b=0;b<wmsProcessTypeList.length;b++)
			{
				var processName= wmsProcessTypeList[b].getValue('name');
				if(processName == strName)
				{
					processTypeId = wmsProcessTypeList[b].id;
					break;
				}
			}
		}
		return processTypeId;
	}
	function checkCompositeBarCodeForEnableAdvancedBarcodeScanningSystemRule(){
		
		var boolCompositeBarCodeScanningUsing = false;
		var wmsBarCodeStringsSearch = search.create({
			type: 'customrecord_wmsse_barcode_strings',
			columns: [{name: 'name'}]
		});
		var search_page_count = 1000;

		var wmsBarCodeStringsSearchResultArr = [];
		var myPagedData = wmsBarCodeStringsSearch.runPaged({
			pageSize: search_page_count
		});
		myPagedData.pageRanges.forEach(function (pageRange) {
			var myPage = myPagedData.fetch({
				index: pageRange.index
			});
			myPage.data.forEach(function (result) {
				wmsBarCodeStringsSearchResultArr.push(result);
			});
		});
		if(wmsBarCodeStringsSearchResultArr.length > 0){
			boolCompositeBarCodeScanningUsing = true;
		}
		return boolCompositeBarCodeScanningUsing;
	}
	
	function updateSystemRule(systemRuleId,tempSytemRuleNewName,tempSystemRuleNewDecsription,tempSystemRuleId,isMultiLanguageEnabled){
		var wmsSystemRuleRec = record.load({type:'customrecord_wmsse_sysrules',
			id:systemRuleId
		});
		wmsSystemRuleRec.setValue({fieldId: 'name',value: tempSytemRuleNewName});
		wmsSystemRuleRec.setValue({fieldId:'custrecord_wmssedescription',value:tempSystemRuleNewDecsription});
		
		if(isMultiLanguageEnabled){ 
			
			var wmsTempSystemRulesRec = record.load({type:'customrecord_wms_temp_sysrules',
				id:tempSystemRuleId,
				isDynamic: true
			});
			var wmsTempSystemRuleName = wmsTempSystemRulesRec.getValue({
				fieldId: 'name'
			});            
			var wmsSystemRuleName = wmsSystemRuleRec.getValue({
				fieldId: 'name'
			});
			if(wmsTempSystemRuleName == wmsSystemRuleName){
				
				insertDataInTransalationTab(wmsTempSystemRulesRec,wmsSystemRuleRec);
			}
		}
		wmsSystemRuleRec.save();
	}
	function getSystemRules(){
		
		var wmsSystemRulesSearch = search.create({
			type: 'customrecord_wmsse_sysrules',
			columns: [
			          {name: 'name'},
			          {name: 'custrecord_wmssedescription'}
			          ]

		});
		var search_page_count = 1000;

		var wmsSystemRulesSearchResultArr = [];
		var myPagedData = wmsSystemRulesSearch.runPaged({
			pageSize: search_page_count
		});
		myPagedData.pageRanges.forEach(function (pageRange) {
			var myPage = myPagedData.fetch({
				index: pageRange.index
			});
			myPage.data.forEach(function (result) {
				wmsSystemRulesSearchResultArr.push(result);
			});
		});
		return wmsSystemRulesSearchResultArr;
	}
	function getTempSystemRules(){
		
		var tempSystemRulesSearch = search.create({
			type: 'customrecord_wms_temp_sysrules',
			columns: [
			          {name: 'custrecord_wms_oldname'},
			          {name: 'custrecord_wms_newname'},
			          {name: 'custrecord_wms_old_description'},
			          {name: 'custrecord_wms_new_description'},
			          {name: 'custrecord_wms_rulevalue'},
			          {name: 'custrecord_wms_ruletype'},
			          {name: 'name'}
			          ]

		});
		var wmsTempSystemRulesSearchResultArr = [];
		var search_page_count = 1000;
		var myPagedData = tempSystemRulesSearch.runPaged({
			pageSize: search_page_count
		});
		myPagedData.pageRanges.forEach(function (pageRange) {
			var myPage = myPagedData.fetch({
				index: pageRange.index
			});
			myPage.data.forEach(function (result) {
				wmsTempSystemRulesSearchResultArr.push(result);
			});
		});
		
		return wmsTempSystemRulesSearchResultArr;
	}
	
	function createSystemRule(systemRuleName,systemRuleDescription,systemRule_RuleValue,systemRule_RuleType,tempSystemRuleId,
			isMultiLanguageEnabled,systemRuleProcessType){
		
		var newsystemrule = record.create({type:'customrecord_wmsse_sysrules'});							
		newsystemrule.setValue({fieldId:'name',value:systemRuleName});
		newsystemrule.setValue({fieldId:'custrecord_wmssedescription',value:systemRuleDescription});
		newsystemrule.setValue({fieldId:'custrecord_wmsserulevalue',value:systemRule_RuleValue});
		newsystemrule.setValue({fieldId:'custrecord_wmsseruletype',value:systemRule_RuleType});
		
		if(systemRuleName == 'Enable Zone Picking for multiple orders' || systemRuleName == 'Enable Zone Picking for single orders'){
			
		var zonePickingTypeSearch =  search.create({type:'customlist_wms_zone_pickingtype',columns:[{	name: 'name'}]	});
		var	 zonePickingType = zonePickingTypeSearch.run().getRange({start: 0,end: 1000});
		if(zonePickingType != undefined && zonePickingType != null && zonePickingType !='' && zonePickingType.length > 0)
		{
			for(var b=0;b<zonePickingType.length;b++)
			{
				var name= zonePickingType[b].getValue('name');
				if(name == 'Pick & Merge')
				{
					var pickAndMergeID = zonePickingType[b].id;
					newsystemrule.setValue({fieldId:'custrecord_wms_pickingtype',value:pickAndMergeID});
					break;
				}
			}
		}
		}
		
		if(systemRuleProcessType != undefined && systemRuleProcessType != null &&
				systemRuleProcessType != 'null' && systemRuleProcessType != 'undefined' && systemRuleProcessType != -1){
			
			newsystemrule.setValue({fieldId:'custrecord_wmsseprocesstype',value:systemRuleProcessType});
		}
		
		if(isMultiLanguageEnabled){
			var wmsTempSystemRuleRec = record.load({type:'customrecord_wms_temp_sysrules',
				id:tempSystemRuleId,
				isDynamic: true
			});
			insertDataInTransalationTab(wmsTempSystemRuleRec,newsystemrule);
		}
		newsystemrule.save();
		
	}
	function deleteTempSystemRules(tempSystemRulesSearchResultArr){
		
		if(tempSystemRulesSearchResultArr.length > 0){
			
			for(var d=0;d<tempSystemRulesSearchResultArr.length;d++){
				record.delete({
					type: 'customrecord_wms_temp_sysrules',
					id: tempSystemRulesSearchResultArr[d].id
				}); 
			}
		}
		
	}

	function hideMenus(){

		try
		{			
			var isEnabled=isWarehousemanagementFeatureEnabled();

			wmsmenusHiding(isEnabled);


		}
		catch(e)
		{
			log.error({title:'error in  HideMenus',details:e});
		}
	}

	function isWarehousemanagementFeatureEnabled() {
		var vResult = false;
		try {
			var warehouseManagementFeature = runtime.isFeatureInEffect({
				feature: 'wmssystem' 
			});

			if (warehouseManagementFeature != null && warehouseManagementFeature != '' && warehouseManagementFeature != 'null' &&
					warehouseManagementFeature != 'undefined' && warehouseManagementFeature != false) {
				//The Warehouse Management feature if provisioned on your account then return true
				vResult = true;
			}
		}
		catch (e) {
			//The Warehouse Management feature if not provisioned on your account then return false
			log.error({
				title: 'exception in isWarehousemanagementFeatureEnabled',
				details: e
			});
			vResult = false;
		}
		return vResult;
	}
	
	function oldMenusDisplayOnWarehouseMgmtFeature(whRole,isinActiveFlag){
		try
		{

			//.............................................................
//old cycle plan custom record
			var scrdeploymentOldCYCCPlan=search.create({
				type: "customrecordtype",
				filters:[
					search.createFilter({
						name: 'scriptid',
						operator: 'is',
						values: 'customrecord_wmsse_cyclecount_plan'
					})
				],
			});
			var result=scrdeploymentOldCYCCPlan.run().getRange({
				start: 0,
				end: 1
			}) || [];

			if(result.length>0){
				//log.debug({title:'OldCYCCPlan',details:result[0].id});
				var menuDeploymentRecordOldCYCCPlan=record.load({
					type: "customrecordtype",
					id: result[0].id
				});
				menuDeploymentRecordOldCYCCPlan.setValue({
					fieldId:'isinactive',
					value:isinActiveFlag,
					ignoreFieldChange: true
				});
				menuDeploymentRecordOldCYCCPlan.save();
			}


			//old cycle count generate and release

			var scrdeploymentOldCyccGenerateAndRelease=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
					search.createFilter({
						name: 'scriptid',
						operator: 'is',
						values: 'customdeploy_wmsse_cyclecountplan'
					})
				]
			});
			var result=scrdeploymentOldCyccGenerateAndRelease.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordOldCyccGenerateAndRelease=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordOldCyccGenerateAndRelease.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordOldCyccGenerateAndRelease.save();
			}



			//Composite Bar Code Component Mapping

			var scrdeploymentCompositeBarCodeMapping=search.create({
				type: "customrecordtype",
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customrecord_barcode_componentmapping'
				         })
				         ],
			});
			var result=scrdeploymentCompositeBarCodeMapping.run().getRange({
				start: 0,
				end: 1
			}) || [];
			
			if(result.length>0){
				log.debug({title:'composite bar code',details:result[0].id});
				var menuDeploymentRecordCompositeBarCodeMapping=record.load({
					type: "customrecordtype",
					id: result[0].id
				});
				menuDeploymentRecordCompositeBarCodeMapping.setValue({
					fieldId:'isinactive',
					value:isinActiveFlag,
					ignoreFieldChange: true
				});
				menuDeploymentRecordCompositeBarCodeMapping.save();
			}
			
			
			
			
			
			//Old Pick Strategy
			
			var scrdeploymentOldPickStrategy=search.create({
				type: "customrecordtype",
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customrecord_wmsse_pickstrategies'
				         })
				         ],
			});
			var result=scrdeploymentOldPickStrategy.run().getRange({
				start: 0,
				end: 1
			}) || [];
			
			if(result.length>0){
				//log.debug({title:'OldPickStrategy',details:result[0].id});
				var menuDeploymentRecordOldPickStrategy=record.load({
					type: "customrecordtype",
					id: result[0].id
				});
				menuDeploymentRecordOldPickStrategy.setValue({
					fieldId:'isinactive',
					value:isinActiveFlag,
					ignoreFieldChange: true
				});
				menuDeploymentRecordOldPickStrategy.save();
			}
			
			
			//WMS OrderType
			
			var scrdeploymentWMSOrderType=search.create({
				type: "customrecordtype",
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customrecord_wmsse_ordertype'
				         })
				         ],
			});
			var result=scrdeploymentWMSOrderType.run().getRange({
				start: 0,
				end: 1
			}) || [];
			
			if(result.length>0){
				var menuDeploymentRecordWMSOrderType=record.load({
					type: "customrecordtype",
					id: result[0].id
				});
				menuDeploymentRecordWMSOrderType.setValue({
					fieldId:'isinactive',
					value:isinActiveFlag,
					ignoreFieldChange: true
				});
				menuDeploymentRecordWMSOrderType.save();
			}

			//single order pick report

			var scrdeploymentSOPKReport=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_pickreport'
				         })
				         ]
			});
			var result=scrdeploymentSOPKReport.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordSOPKReport=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordSOPKReport.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordSOPKReport.save();
			}

			//multi order pickreport script deployment

			var scrdeploymentMOPKReport=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_multiordpickreport'
				         })
				         ]
			});
			var result=scrdeploymentMOPKReport.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordMOPKReport=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordMOPKReport.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordMOPKReport.save();
			}

			//Multi-Order Pick Report Scheduler script deployment

			var scrdeploymentMOPKReportSchd=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_multiordpickrpt'
				         })
				         ]
			});
			var result=scrdeploymentMOPKReportSchd.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordMOPKReportSchd=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordMOPKReportSchd.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordMOPKReportSchd.save();
			}
			var scrdeploymentpickReportStatus=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_pickstatusreport'
				         })
				         ]
			});
			var result=scrdeploymentpickReportStatus.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordpickReportStatus=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordpickReportStatus.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordpickReportStatus.save();
			}

			//Multi Order Pick Report-Back Order Scheduler script deployment

			var scrdeploymentMOPKReportBackSchd=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_multiordpickrpt_fcfc'
				         })
				         ]
			});
			var result=scrdeploymentMOPKReportBackSchd.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordMOPKReportBackSchd=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordMOPKReportBackSchd.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordMOPKReportBackSchd.save();
			}

			//pick reversal old

			var scrdeploymentreversal=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_gui_pickreversalqb'
				         })
				         ]
			});
			var result=scrdeploymentreversal.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordreversal=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordreversal.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordreversal.save();
			}
			//Mobilemenu script deployment
			var scrdeploymentMobilemenu=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_menu_loc_scan'
				         })
				         ]
			});
			var result=scrdeploymentMobilemenu.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordmobilemenu=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordmobilemenu.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordmobilemenu.save();
			}
			//post item fulfillment partial picked orders

			var scrdeploymentIFPartialPicked=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_partial_fulfill'
				         })
				         ]
			});
			var result=scrdeploymentIFPartialPicked.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordIFPartialPicked=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordIFPartialPicked.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordIFPartialPicked.save();
			}



//old inv report
			var scrdeploymentOldInvreport=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
					search.createFilter({
						name: 'scriptid',
						operator: 'is',
						values: 'customdeploy_wmsse_inv_report_dl'
					})
				]
			});
			var result=scrdeploymentOldInvreport.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordOldInvreport=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordOldInvreport.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordOldInvreport.save();
			}

			//single order packing

			var scrdeploymentSOPacking=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_gui_packing'
				         })
				         ]
			});
			var result=scrdeploymentSOPacking.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordSOPacking=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordSOPacking.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordSOPacking.save();
			}
//old GUI post item receipt deployment
			log.debug("GUIPostitemreceipt",whRole);
			var scrdeploymentPostItemReceipt=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
					search.createFilter({
						name: 'scriptid',
						operator: 'is',
						values: 'customdeploy_wmsse_postitemreceipt'
					})
				]
			});
			var result=scrdeploymentPostItemReceipt.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentPostItemReceipt=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentPostItemReceipt.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentPostItemReceipt.save();
			}

//.............................................................


			//Bin Lock record delete

			var scrdeploymentBinLockrecordDelete=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
					search.createFilter({
						name: 'scriptid',
						operator: 'is',
						values: 'customdeploy_wmsse_binlocks_del_sch'
					})
					]
			});
			var result=scrdeploymentBinLockrecordDelete.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordBinLockrecordDelete=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordBinLockrecordDelete.setValue({
					fieldId:'isdeployed',
					value:true,
					ignoreFieldChange: true
				});
				menuDeploymentRecordBinLockrecordDelete.save();
			}


			//multi order packing

			var scrdeploymentMOPacking=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_gui_bulk_packing'
				         })
				         ]
			});
			var result=scrdeploymentMOPacking.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordMOPacking=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordMOPacking.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordMOPacking.save();
			}
			var scrdeploymentQuickShip=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_quickship'
				         })
				         ]
			});
			var result=scrdeploymentQuickShip.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordQuickShip=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordQuickShip.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordQuickShip.save();
			}
		}
		catch(e){
			log.error({title:'error in  hideOldMenus',details:e});
		}
	}
	
	
	function newMenusDisplayOnWarehouseMgmtFeature(isEnabled)
	{
		var isInActive = false;
		if(!isEnabled)
		{
			isInActive = true;
		}
		// new cycle count generate and release script

		var scrdeploymentCYCCGenerateAndRelease=search.create({
			type: search.Type.SCRIPT_DEPLOYMENT,
			filters:[
				search.createFilter({
					name: 'scriptid',
					operator: 'is',
					values: 'customdeploy_wms_cc_planandrelease'
				})
			]
		});
		var result=scrdeploymentCYCCGenerateAndRelease.run().getRange({
			start: 0,
			end: 1
		}) || [];
		if(result.length>0){
			var menuDeploymentRecordCYCCGenerateAndRelease=record.load({
				type: record.Type.SCRIPT_DEPLOYMENT,
				id: result[0].id
			});
			menuDeploymentRecordCYCCGenerateAndRelease.setValue({
				fieldId:'isdeployed',
				value:isEnabled,
				ignoreFieldChange: true
			});
			menuDeploymentRecordCYCCGenerateAndRelease.save();
		}
		//-----------------------------------------------------


		//new cycle count plan custom record
		var scrdeploymentCYCCPlan=search.create({
			type: "customrecordtype",
			filters:[
				search.createFilter({
					name: 'scriptid',
					operator: 'is',
					values: 'customrecord_wms_cyclecount_plans'
				})
			],
		});
		var result=scrdeploymentCYCCPlan.run().getRange({
			start: 0,
			end: 1
		}) || [];

		if(result.length>0){
			//log.debug({title:'CYCCPlan',details:result[0].id});
			var menuDeploymentRecordCYCCPlan=record.load({
				type: "customrecordtype",
				id: result[0].id
			});
			menuDeploymentRecordCYCCPlan.setValue({
				fieldId:'isinactive',
				value:isInActive,
				ignoreFieldChange: true
			});
			menuDeploymentRecordOldCYCCPlan.save();
		}

		//...................................................

		//New Quick Ship script deployment
		var scrdeploymentquickship=search.create({
			type: search.Type.SCRIPT_DEPLOYMENT,
			filters:[
			         search.createFilter({
			        	 name: 'scriptid',
			        	 operator: 'is',
			        	 values: 'customdeploy_wms_gui_quickship'
			         })
			         ]
		});
		var result=scrdeploymentquickship.run().getRange({
			start: 0,
			end: 1
		}) || [];
		if(result.length>0){
			var menuDeploymentRecordquickship=record.load({
				type: record.Type.SCRIPT_DEPLOYMENT,
				id: result[0].id
			});
			menuDeploymentRecordquickship.setValue({
				fieldId:'isdeployed',
				value:isEnabled,
				ignoreFieldChange: true
			});
			menuDeploymentRecordquickship.save();
		}
		//-----------------------------------------------------

		//new GUI post item receipt
		var scrdeploymentPostItemReceipt=search.create({
			type: search.Type.SCRIPT_DEPLOYMENT,
			filters:[
				search.createFilter({
					name: 'scriptid',
					operator: 'is',
					values: 'customdeploy_wms_gui_postitemreceipt'
				})
			]
		});
		var result=scrdeploymentPostItemReceipt.run().getRange({
			start: 0,
			end: 1
		}) || [];
		if(result.length>0){
			var menuDeploymentPostItemReceipt=record.load({
				type: record.Type.SCRIPT_DEPLOYMENT,
				id: result[0].id
			});
			menuDeploymentPostItemReceipt.setValue({
				fieldId:'isdeployed',
				value:isEnabled,
				ignoreFieldChange: true
			});
			menuDeploymentPostItemReceipt.save();
		}
		//-----------------------------------------------------

		//Packing script deployment
		var scrdeploymentpacking=search.create({
			type: search.Type.SCRIPT_DEPLOYMENT,
			filters:[
			         search.createFilter({
			        	 name: 'scriptid',
			        	 operator: 'is',
			        	 values: 'customdeploy_wms_gui_packing'
			         })
			         ]
		});
		var result=scrdeploymentpacking.run().getRange({
			start: 0,
			end: 1
		}) || [];
		if(result.length>0){
			var menuDeploymentRecordpacking=record.load({
				type: record.Type.SCRIPT_DEPLOYMENT,
				id: result[0].id
			});
			menuDeploymentRecordpacking.setValue({
				fieldId:'isdeployed',
				value:isEnabled,
				ignoreFieldChange: true
			});
			menuDeploymentRecordpacking.save();
		}
		//-----------------------------------------------------

		//pickreversal script deploymeny
		var scrdeploymentreversal=search.create({
			type: search.Type.SCRIPT_DEPLOYMENT,
			filters:[
			         search.createFilter({
			        	 name: 'scriptid',
			        	 operator: 'is',
			        	 values: 'customdeploy_wms_guipickreversal'
			         })
			         ]
		});
		var result=scrdeploymentreversal.run().getRange({
			start: 0,
			end: 1
		}) || [];
		if(result.length>0){
			var menuDeploymentRecordreversal=record.load({
				type: record.Type.SCRIPT_DEPLOYMENT,
				id: result[0].id
			});
			menuDeploymentRecordreversal.setValue({
				fieldId:'isdeployed',
				value:isEnabled,
				ignoreFieldChange: true
			});
			menuDeploymentRecordreversal.save();
		}
		//-----------------------------------------------------




		//new inventory report script deploymeny
		var scrdeploymentInvReport=search.create({
			type: search.Type.SCRIPT_DEPLOYMENT,
			filters:[
				search.createFilter({
					name: 'scriptid',
					operator: 'is',
					values: 'customdeploy_wms_inventoryreport'
				})
			]
		});
		var result=scrdeploymentInvReport.run().getRange({
			start: 0,
			end: 1
		}) || [];
		if(result.length>0){
			var menuDeploymentRecordInvReport=record.load({
				type: record.Type.SCRIPT_DEPLOYMENT,
				id: result[0].id
			});
			menuDeploymentRecordInvReport.setValue({
				fieldId:'isdeployed',
				value:isEnabled,
				ignoreFieldChange: true
			});
			menuDeploymentRecordInvReport.save();
		}
		//-----------------------------------------------------

		//marktaskdone script deploymeny
		var scrdeploymentmarktaskdone=search.create({
			type: search.Type.SCRIPT_DEPLOYMENT,
			filters:[
			         search.createFilter({
			        	 name: 'scriptid',
			        	 operator: 'is',
			        	 values: 'customdeploy_wms_gui_mrkcmp_partial_pick'
			         })
			         ]
		});
		var result=scrdeploymentmarktaskdone.run().getRange({
			start: 0,
			end: 1
		}) || [];
		if(result.length>0){
			var menuDeploymentRecordmarktaskdone=record.load({
				type: record.Type.SCRIPT_DEPLOYMENT,
				id: result[0].id
			});
			menuDeploymentRecordmarktaskdone.setValue({
				fieldId:'isdeployed',
				value:isEnabled,
				ignoreFieldChange: true
			});
			menuDeploymentRecordmarktaskdone.save();
		}
		//-----------------------------------------------------


		//Mobilemenu script deploymeny
		var scrdeploymentMobilemenu=search.create({
			type: search.Type.SCRIPT_DEPLOYMENT,
			filters:[
			         search.createFilter({
			        	 name: 'scriptid',
			        	 operator: 'is',
			        	 values: 'customdeploy_wms_mobilemenu'
			         })
			         ]
		});
		var result=scrdeploymentMobilemenu.run().getRange({
			start: 0,
			end: 1
		}) || [];
		if(result.length>0){
			var menuDeploymentRecordmobilemenu=record.load({
				type: record.Type.SCRIPT_DEPLOYMENT,
				id: result[0].id
			});
			menuDeploymentRecordmobilemenu.setValue({
				fieldId:'isdeployed',
				value:isEnabled,
				ignoreFieldChange: true
			});
			menuDeploymentRecordmobilemenu.save();
		}
		//-----------------------------------------------------

	}


	function wmsmenusHiding(isEnabled)
	{

		//New Quick Ship script deployment
		var scrdeploymentquickship=search.create({
			type: search.Type.SCRIPT_DEPLOYMENT,
			filters:[
			         search.createFilter({
			        	 name: 'scriptid',
			        	 operator: 'is',
			        	 values: 'customdeploy_wms_gui_quickship'
			         })
			         ]
		});
		var result=scrdeploymentquickship.run().getRange({
			start: 0,
			end: 1
		}) || [];
		if(result.length>0){
			var menuDeploymentRecordquickship=record.load({
				type: record.Type.SCRIPT_DEPLOYMENT,
				id: result[0].id
			});
			menuDeploymentRecordquickship.setValue({
				fieldId:'isdeployed',
				value:isEnabled,
				ignoreFieldChange: true
			});
			menuDeploymentRecordquickship.save();
		}
		//-----------------------------------------------------

		//Packing script deployment
		var scrdeploymentpacking=search.create({
			type: search.Type.SCRIPT_DEPLOYMENT,
			filters:[
			         search.createFilter({
			        	 name: 'scriptid',
			        	 operator: 'is',
			        	 values: 'customdeploy_wms_gui_packing'
			         })
			         ]
		});
		var result=scrdeploymentpacking.run().getRange({
			start: 0,
			end: 1
		}) || [];
		if(result.length>0){
			var menuDeploymentRecordpacking=record.load({
				type: record.Type.SCRIPT_DEPLOYMENT,
				id: result[0].id
			});
			menuDeploymentRecordpacking.setValue({
				fieldId:'isdeployed',
				value:isEnabled,
				ignoreFieldChange: true
			});
			menuDeploymentRecordpacking.save();
		}
		//-----------------------------------------------------

		//pickreversal script deploymeny
		var scrdeploymentreversal=search.create({
			type: search.Type.SCRIPT_DEPLOYMENT,
			filters:[
			         search.createFilter({
			        	 name: 'scriptid',
			        	 operator: 'is',
			        	 values: 'customdeploy_wms_guipickreversal'
			         })
			         ]
		});
		var result=scrdeploymentreversal.run().getRange({
			start: 0,
			end: 1
		}) || [];
		if(result.length>0){
			var menuDeploymentRecordreversal=record.load({
				type: record.Type.SCRIPT_DEPLOYMENT,
				id: result[0].id
			});
			menuDeploymentRecordreversal.setValue({
				fieldId:'isdeployed',
				value:isEnabled,
				ignoreFieldChange: true
			});
			menuDeploymentRecordreversal.save();
		}
		//-----------------------------------------------------



		//marktaskdone script deploymeny
		var scrdeploymentmarktaskdone=search.create({
			type: search.Type.SCRIPT_DEPLOYMENT,
			filters:[
			         search.createFilter({
			        	 name: 'scriptid',
			        	 operator: 'is',
			        	 values: 'customdeploy_wms_gui_mrkcmp_partial_pick'
			         })
			         ]
		});
		var result=scrdeploymentmarktaskdone.run().getRange({
			start: 0,
			end: 1
		}) || [];
		if(result.length>0){
			var menuDeploymentRecordmarktaskdone=record.load({
				type: record.Type.SCRIPT_DEPLOYMENT,
				id: result[0].id
			});
			menuDeploymentRecordmarktaskdone.setValue({
				fieldId:'isdeployed',
				value:isEnabled,
				ignoreFieldChange: true
			});
			menuDeploymentRecordmarktaskdone.save();
		}
		//-----------------------------------------------------


		//Mobilemenu script deploymeny
		var scrdeploymentMobilemenu=search.create({
			type: search.Type.SCRIPT_DEPLOYMENT,
			filters:[
			         search.createFilter({
			        	 name: 'scriptid',
			        	 operator: 'is',
			        	 values: 'customdeploy_wms_mobilemenu'
			         })
			         ]
		});
		var result=scrdeploymentMobilemenu.run().getRange({
			start: 0,
			end: 1
		}) || [];
		if(result.length>0){
			var menuDeploymentRecordmobilemenu=record.load({
				type: record.Type.SCRIPT_DEPLOYMENT,
				id: result[0].id
			});
			menuDeploymentRecordmobilemenu.setValue({
				fieldId:'isdeployed',
				value:isEnabled,
				ignoreFieldChange: true
			});
			menuDeploymentRecordmobilemenu.save();
		}
		//-----------------------------------------------------

	}

	function hideOldMenusforNewInstallOnly(){
		try
		{	
			var whRole = false;
			
			
			//Composite Bar Code Component Mapping 

			var scrdeploymentCompositeBarCodeMapping=search.create({
				type: "customrecordtype",
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customrecord_barcode_componentmapping'
				         })
				         ],
			});
			var result=scrdeploymentCompositeBarCodeMapping.run().getRange({
				start: 0,
				end: 1
			}) || [];
			
			if(result.length>0){
				log.debug({title:'composite bar code',details:result[0].id});
				var menuDeploymentRecordCompositeBarCodeMapping=record.load({
					type: "customrecordtype",
					id: result[0].id
				});
				menuDeploymentRecordCompositeBarCodeMapping.setValue({
					fieldId:'isinactive',
					value:true,
					ignoreFieldChange: true
				});
				menuDeploymentRecordCompositeBarCodeMapping.save();
			}
			

			//single order pick report

			var scrdeploymentSOPKReport=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_pickreport'
				         })
				         ]
			});
			var result=scrdeploymentSOPKReport.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordSOPKReport=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordSOPKReport.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordSOPKReport.save();
			}

			//multi order pickreport script deployment

			var scrdeploymentMOPKReport=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_multiordpickreport'
				         })
				         ]
			});
			var result=scrdeploymentMOPKReport.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordMOPKReport=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordMOPKReport.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordMOPKReport.save();
			}

			//Multi-Order Pick Report Scheduler script deployment

			var scrdeploymentMOPKReportSchd=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_multiordpickrpt'
				         })
				         ]
			});
			var result=scrdeploymentMOPKReportSchd.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordMOPKReportSchd=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordMOPKReportSchd.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordMOPKReportSchd.save();
			}
			var scrdeploymentpickReportStatus=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_pickstatusreport'
				         })
				         ]
			});
			var result=scrdeploymentpickReportStatus.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordpickReportStatus=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordpickReportStatus.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordpickReportStatus.save();
			}

			//Multi Order Pick Report-Back Order Scheduler script deployment

			var scrdeploymentMOPKReportBackSchd=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_multiordpickrpt_fcfc'
				         })
				         ]
			});
			var result=scrdeploymentMOPKReportBackSchd.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordMOPKReportBackSchd=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordMOPKReportBackSchd.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordMOPKReportBackSchd.save();
			}

			//pick reversal old

			var scrdeploymentreversal=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_gui_pickreversalqb'
				         })
				         ]
			});
			var result=scrdeploymentreversal.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordreversal=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordreversal.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordreversal.save();
			}
			//Mobilemenu script deployment
			var scrdeploymentMobilemenu=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_menu_loc_scan'
				         })
				         ]
			});
			var result=scrdeploymentMobilemenu.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordmobilemenu=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordmobilemenu.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordmobilemenu.save();
			}
			//post item fulfillment partial picked orders

			var scrdeploymentIFPartialPicked=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_partial_fulfill'
				         })
				         ]
			});
			var result=scrdeploymentIFPartialPicked.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordIFPartialPicked=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordIFPartialPicked.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordIFPartialPicked.save();
			}


			//single order packing

			var scrdeploymentSOPacking=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_gui_packing'
				         })
				         ]
			});
			var result=scrdeploymentSOPacking.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordSOPacking=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordSOPacking.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordSOPacking.save();
			}



			//Bin Lock record delete

			var scrdeploymentBinLockrecordDelete=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
					search.createFilter({
						name: 'scriptid',
						operator: 'is',
						values: 'customdeploy_wmsse_binlocks_del_sch'
					})
					]
			});
			var result=scrdeploymentBinLockrecordDelete.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordBinLockrecordDelete=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordBinLockrecordDelete.setValue({
					fieldId:'isdeployed',
					value:true,
					ignoreFieldChange: true
				});
				menuDeploymentRecordBinLockrecordDelete.save();
			}


			//multi order packing

			var scrdeploymentMOPacking=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_gui_bulk_packing'
				         })
				         ]
			});
			var result=scrdeploymentMOPacking.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordMOPacking=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordMOPacking.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordMOPacking.save();
			}
			var scrdeploymentQuickShip=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
				         search.createFilter({
				        	 name: 'scriptid',
				        	 operator: 'is',
				        	 values: 'customdeploy_wmsse_quickship'
				         })
				         ]
			});
			var result=scrdeploymentQuickShip.run().getRange({
				start: 0,
				end: 1
			}) || [];
			if(result.length>0){
				var menuDeploymentRecordQuickShip=record.load({
					type: record.Type.SCRIPT_DEPLOYMENT,
					id: result[0].id
				});
				menuDeploymentRecordQuickShip.setValue({
					fieldId:'isdeployed',
					value:whRole,
					ignoreFieldChange: true
				});
				menuDeploymentRecordQuickShip.save();
			}
		}
		catch(e){
			log.error({title:'error in  hideOldMenus',details:e});
		}
	}


	function mobileBundleRegisteredAppUpdate(){

		try{
			var applicationDefaultSearchResult = getApplicationDefaultResults();
			var registeredAppResults = getMobileRegisteredAppsResults();
			var bundleId = getBundleId();
			var registeredAppPath = 'SuiteBundles/Bundle '+bundleId+'/'+'src/Config/appConfig.js';
			// update/create registered app entry for end user account.
			if(applicationDefaultSearchResult.length > 0){
				
			   if(registeredAppResults.length > 0){

				   var registeredAppId = registeredAppResults[0].id;
				   updateRegisteredAppEntryWithNewBundleId(registeredAppId,registeredAppPath);
			   }
			}
			else{
				 
				if(registeredAppResults.length > 0){

					var registeredApp_Id = registeredAppResults[0].id;
					updateRegisteredAppEntryWithNewBundleId(registeredApp_Id,registeredAppPath);
				}
				else{
					createRegisteredAppEntry(registeredAppPath);
				}
			}
		}
		catch(e){
			log.error({title:'error in  mobileBundleRegisteredAppupdate',details:e});
		}
	}
	function updateRegisteredAppEntryWithNewBundleId(registeredAppRecId,registeredApp_Path){
		
		var registeredAppRec = record.load({type: 'customrecord_mobile_registered_apps',id:registeredAppRecId});
		registeredAppRec.setValue({fieldId: 'custrecord_mobile_app_config_path',value: registeredApp_Path});
		registeredAppRec.save();
		
	}
	function createRegisteredAppEntry(registeredApp_Path){
		
		var registeredRec = record.create({type:'customrecord_mobile_registered_apps'
		});
		registeredRec.setValue({fieldId:'name',value: 'NSWMS'});
		registeredRec.setValue({fieldId: 'custrecord_mobile_app_config_path',value: registeredApp_Path});
		registeredRec.save();  
	}
	function getApplicationDefaultResults(){
		
		var applicationDefalutSearch = search.create({
			type: 'customrecord_mobile_application_defaults',
			filters: [{
				name: 'name',
				operator: 'is',
				values: ['NSWMS']
			}]
		});
		var applicationDefaultSearchResultArr = [];
		var search_page_count = 10;

		var myPagedData = applicationDefalutSearch.runPaged({
			pageSize: search_page_count
		});
		myPagedData.pageRanges.forEach(function (pageRange) {
			var myPage = myPagedData.fetch({
				index: pageRange.index
			});
			myPage.data.forEach(function (result) {
				applicationDefaultSearchResultArr.push(result);
			});
		});
		
		return applicationDefaultSearchResultArr;
	}
	function getMobileRegisteredAppsResults(){
		
		var registeredAppSearch = search.create({
			type: 'customrecord_mobile_registered_apps',
			filters: [{
				name: 'name',
				operator: 'is',
				values: ['NSWMS']
			}]
		}); 
		var searchResult = [];
		var search_page_count = 10;
		var myPageData = registeredAppSearch.runPaged({
			pageSize: search_page_count
		});
		myPageData.pageRanges.forEach(function (pageRange) {
			var myPage = myPageData.fetch({
				index: pageRange.index
			});
			myPage.data.forEach(function (result) {
				searchResult.push(result);
			});
		});
		return searchResult;
	}

	function autoPrintRuleDataCreate(){

		try{

			var mobileBundleExist = false;
			var mobileBundleUpdate = false;

			//Field Deletion on Rule Values Custom Record
			var filters = [search.createFilter({
				name: "scriptid",
				operator: "IS",
				values: 'customrecord_print_rule_values'
			})];

			var searchColumns = ["name","scriptid"];

			var recordSearch = search.create({
				type: 'customrecordtype',
				filters: filters,
				columns: searchColumns
			});

			var results = [];
			var searchPageData;
			var pageSize = recordSearch.runPaged().count;

			var searchData = recordSearch.runPaged({
				pageSize: pageSize
			});
			searchData.pageRanges
			.forEach(function (pageRange) {
				searchPageData = searchData.fetch({
					index: pageRange.index
				});
				searchPageData.data
				.forEach(function (result) {
					results.push(result);
				});
			});

			if(results && results.length > 0)
			{
				recId = results[0].id;
				mobileBundleExist =true;
			}



			//Mobile Bundle Updation Check
			var printTemplatefilters = [search.createFilter({
				name: "scriptid",
				operator: "IS",
				values: 'customrecord_print_templates'
			})];

			var printTemplatesrchCol = ["name","scriptid"];

			var printTemplateRecSearch = search.create({
				type: 'customrecordtype',
				filters: printTemplatefilters,
				columns: printTemplatesrchCol
			});

			var printTemplateRes = [];
			var searchPageData;
			var pageSize = printTemplateRecSearch.runPaged().count;

			var searchData = printTemplateRecSearch.runPaged({
				pageSize: pageSize
			});
			searchData.pageRanges
			.forEach(function (pageRange) {
				searchPageData = searchData.fetch({
					index: pageRange.index
				});
				searchPageData.data
				.forEach(function (result) {
					printTemplateRes.push(result);
				});
			});
			
			log.debug('Print Template Result :', printTemplateRes);


			if(printTemplateRes && printTemplateRes.length > 0)
			{
				mobileBundleUpdate =true;
			}

			if(mobileBundleExist){

				removeRuleValueFields(recId);

				if(mobileBundleUpdate)
				{
					//Rule configuration
					createPrintTemplate();
					createReportType();
					createRuleGroup();
					createRuleMap();
					createRuleValue();
				}
			}else{
				//log.error({title:'Mobile Bundle does not exist',details:e});
			}
		}
		catch(e)
		{
			log.error({title:'error in  autoPrintRuleDataCreate',details:e});
		}
	}

	function createPrintTemplate()
	{
		// Print Template
		var recordType = 'customrecord_print_templates';
		var columns = [{name: 'name'},
					  {name: 'internalid'},
					  {name: 'custrecord_print_label_template_path'},
					  {name: 'custrecord_print_template_app_name'},
					  {name: 'custrecord_print_t_is_locked'},
					  ];

		var searchResult = printRecordSearch(recordType, columns);

		if(searchResult.length == 0)
		{
			printTemplateRecordCreate('WMS Default Item Label PDF Template', '~/src/Templates/ItemLabelPDFTemplate.xml');
			printTemplateRecordCreate('WMS Default Item Label ZPL Template', '~/src/Templates/ItemLabelZPLTemplate.txt');
			printTemplateRecordCreate('WMS Default Pallet Label PDF Template', '~/src/Templates/PalletLabelPDFTemplate.xml');
			printTemplateRecordCreate('WMS Default Pallet Label ZPL Template', '~/src/Templates/PalletLabelZPLTemplate.txt');
			printTemplateRecordCreate('WMS Default Item Label Advacned PDF Template', 'CUSTTMPL_WMS_ITEM_LABEL');
			printTemplateRecordCreate('WMS Default Pallet Label Advacned PDF Template', 'CUSTTMPL_WMS_PALLET_LABEL');
			printTemplateRecordCreate('WMS Default WO Pallet Label PDF Template', '~/src/Templates/WOPalletLabelPDFTemplate.xml');
			printTemplateRecordCreate('WMS Default WO Pallet Label ZPL Template', '~/src/Templates/WOPalletLabelZPLTemplate.txt');
			printTemplateRecordCreate('WMS Default Carton Label PDF Template', '~/src/Templates/CartonLabelPDFTemplate.xml');
			printTemplateRecordCreate('WMS Default Carton Label ZPL Template', '~/src/Templates/CartonLabelZPLTemplate.txt');
			printTemplateRecordCreate('WMS Default Carton Label Advanced PDF Template', 'CUSTTMPL_WMS_CARTON_LABEL');
			printTemplateRecordCreate('WMS Default WO Pallet Label Advanced PDF Template', 'CUSTTMPL_WMS_WOPALLET_LABEL');
			printTemplateRecordCreate('WMS Default Item Label with Lot or Serial PDF Template', '~/src/Templates/ItemLabelLotOrSerialPDFTemplate.xml');
			printTemplateRecordCreate('WMS Default Item Label with Lot or Serial ZPL Template', '~/src/Templates/ItemLabelLotOrSerialZPLTemplate.txt');
			printTemplateRecordCreate('WMS Default Pallet Label with Lot or Serial PDF Template', '~/src/Templates/PalletLabelLotOrSerialPDFTemplate.xml');
			printTemplateRecordCreate('WMS Default Pallet Label with Lot or Serial ZPL Template', '~/src/Templates/PalletLabelLotOrSerialZPLTemplate.txt');
			printTemplateRecordCreate('WMS Default Item Label with Lot or Serial Advanced PDF Template', 'CUSTTMPL_WMS_ITEM_LOT_SERIAL_LABEL');
      printTemplateRecordCreate('WMS Default Pallet Label with Lot or Serial Advanced PDF Template', 'CUSTTMPL_WMS_PALLET_LOT_SERIAL_LABEL');
			printTemplateRecordCreate('WMS Default WO Pallet Label with Lot or Serial PDF Template', '~/src/Templates/WOPalletLabelLotOrSerialPDFTemplate.xml');
			printTemplateRecordCreate('WMS Default WO Pallet Label with Lot or Serial ZPL Template', '~/src/Templates/WOPalletLabelLotOrSerialZPLTemplate.xml');
			printTemplateRecordCreate('WMS Default WO Pallet Label with Lot or Serial Advanced PDF Template', 'CUSTTMPL_WMS_WO_PALLET_LOT_SERIAL_LABEL');


		}
		else if(searchResult.length > 0)
		{
			var printTemplateItemLabelPDF = true;
			var printTemplateItemLabelZPL = true;
			var printTemplatePalletLabelPDF = true;
			var printTemplatePalletLabelZPL = true;
			var printTemplateItemLabelAdvPDF = true;
			var printTemplatePalletLabelAdvPDF = true;
			var printTemplateWOPalletLabelPDF = true;
			var printTemplateWOPalletLabelZPL = true;
			var printTemplateCartonItemLabelPDF = true;
			var printTemplateCartonItemLabelZPL = true;
			var printTemplateCartonLabelAdvPDF = true;
			var printTemplateWOPalletLabelAdvPDF = true;
			var printTemplateLotSerialItemLabelZPL = true;
			var printTemplateLotSerialItemLabelPDF = true;
			var printTemplateLotSerialItemLabelAdvPDF = true;
			var printTemplateLotSerialPalletLabelZPL = true;
			var printTemplateLotSerialPalletLabelPDF = true;
			var printTemplateLotSerialPalletLabelAdvPDF = true;
			var printTemplateLotSerialWOPalletLabelZPL = true;
			var printTemplateLotSerialWOPalletLabelPDF = true;
			var printTemplateLotSerialWOPalletLabelAdvPDF = true;


			for(var i = 0; i< searchResult.length; i++)
			{
				var columnsObject = new Object();
				var internalId = searchResult[i].getValue({name:'internalid'});

				if(searchResult[i].getValue({name:'name'}) == 'WMS Default Item Label PDF Template' && 
						searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == '~/src/Templates/ItemLabelPDFTemplate.xml'
							&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateItemLabelPDF = false;
				}

				if(searchResult[i].getValue({name:'name'}) == 'WMS Default Item Label ZPL Template' && 
						searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == '~/src/Templates/ItemLabelZPLTemplate.txt'
							&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateItemLabelZPL = false;
				}

				if(searchResult[i].getValue({name:'name'}) == 'WMS Default Pallet Label PDF Template' && 
						searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == '~/src/Templates/PalletLabelPDFTemplate.xml'
							&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplatePalletLabelPDF = false;
				}

				if(searchResult[i].getValue({name:'name'}) == 'WMS Default Pallet Label ZPL Template' && 
						searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == '~/src/Templates/PalletLabelZPLTemplate.txt'
							&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplatePalletLabelZPL = false;
				}

				if(searchResult[i].getValue({name:'name'}) == 'WMS Default Item Label Advacned PDF Template' &&
						searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == 'CUSTTMPL_WMS_ITEM_LABEL'
							&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateItemLabelAdvPDF = false;
				}

				if(searchResult[i].getValue({name:'name'}) == 'WMS Default Pallet Label Advacned PDF Template' &&
						searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == 'CUSTTMPL_WMS_PALLET_LABEL'
							&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplatePalletLabelAdvPDF = false;
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS Default WO Pallet Label PDF Template' &&
						searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == '~/src/Templates/WOPalletLabelPDFTemplate.xml'
							&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateWOPalletLabelPDF = false;
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS Default WO Pallet Label ZPL Template' &&
						searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == '~/src/Templates/WOPalletLabelZPLTemplate.txt'
							&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateWOPalletLabelZPL = false;
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS Default Carton Label PDF Template' &&
						searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == '~/src/Templates/CartonLabelPDFTemplate.xml'
							&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateCartonItemLabelPDF = false;
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS Default Carton Label ZPL Template' &&
						searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == '~/src/Templates/CartonLabelZPLTemplate.txt'
							&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateCartonItemLabelZPL = false;
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS Default Carton Label Advanced PDF Template' &&
						searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == 'CUSTTMPL_WMS_CARTON_LABEL'
							&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateCartonLabelAdvPDF = false;
				}

				if(searchResult[i].getValue({name:'name'}) == 'WMS Default WO Pallet Label Advanced PDF Template' &&
						searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == 'CUSTTMPL_WMS_WOPALLET_LABEL'
							&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateWOPalletLabelAdvPDF = false;
				}

				if(searchResult[i].getValue({name:'name'}) == 'WMS Default Item Label with Lot or Serial PDF Template' &&
					searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == '~/src/Templates/ItemLabelLotOrSerialPDFTemplate.xml'
					&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateLotSerialItemLabelPDF = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Default Item Label with Lot or Serial ZPL Template' &&
					searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == '~/src/Templates/ItemLabelLotOrSerialZPLTemplate.txt'
					&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateLotSerialItemLabelZPL = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Default Item Label with Lot or Serial Advanced PDF Template' &&
					searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == 'CUSTTMPL_WMS_ITEM_LOT_SERIAL_LABEL'
					&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateLotSerialItemLabelAdvPDF = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Default Pallet Label with Lot or Serial PDF Template' &&
					searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == '~/src/Templates/PalletLabelLotOrSerialPDFTemplate.xml'
					&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateLotSerialPalletLabelPDF = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Default Pallet Label with Lot or Serial ZPL Template' &&
					searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == '~/src/Templates/PalletLabelLotOrSerialZPLTemplate.txt'
					&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateLotSerialPalletLabelZPL = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Default Pallet Label with Lot or Serial Advanced PDF Template' &&
					searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == 'CUSTTMPL_WMS_PALLET_LOT_SERIAL_LABEL'
					&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateLotSerialPalletLabelAdvPDF = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Default WO Pallet Label with Lot or Serial PDF Template' &&
					searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == '~/src/Templates/WOPalletLabelLotOrSerialPDFTemplate.xml'
					&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateLotSerialWOPalletLabelPDF = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Default WO Pallet Label with Lot or Serial ZPL Template' &&
					searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == '~/src/Templates/WOPalletLabelLotOrSerialZPLTemplate.txt'
					&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateLotSerialWOPalletLabelZPL  = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Default WO Pallet Label with Lot or Serial Advanced PDF Template' &&
					searchResult[i].getValue({name:'custrecord_print_label_template_path'}) == 'CUSTTMPL_WMS_WO_PALLET_LOT_SERIAL_LABEL'
					&& searchResult[i].getValue({name:'custrecord_print_template_app_name'}) == 'NSWMS')
				{
					if(searchResult[i].getValue({name:'custrecord_print_t_is_locked'}) == false)
					{
						columnsObject['custrecord_print_t_is_locked'] = true;
						printRecordUpdate('customrecord_print_templates', internalId, columnsObject);
					}
					printTemplateLotSerialWOPalletLabelAdvPDF  = false;
				}


				
			}
			if(printTemplateItemLabelPDF)
			{
				printTemplateRecordCreate('WMS Default Item Label PDF Template', '~/src/Templates/ItemLabelPDFTemplate.xml');
			}
			
			if(printTemplateItemLabelZPL)
			{
				printTemplateRecordCreate('WMS Default Item Label ZPL Template', '~/src/Templates/ItemLabelZPLTemplate.txt');
			}
			
			if(printTemplatePalletLabelPDF)
			{
				printTemplateRecordCreate('WMS Default Pallet Label PDF Template', '~/src/Templates/PalletLabelPDFTemplate.xml');
			}
			if(printTemplatePalletLabelZPL)
			{
				printTemplateRecordCreate('WMS Default Pallet Label ZPL Template', '~/src/Templates/PalletLabelZPLTemplate.txt');
			}			
			if(printTemplateItemLabelAdvPDF)
			{
				printTemplateRecordCreate('WMS Default Item Label Advacned PDF Template', 'CUSTTMPL_WMS_ITEM_LABEL');
			}

			if(printTemplatePalletLabelAdvPDF)
			{
				printTemplateRecordCreate('WMS Default Pallet Label Advacned PDF Template', 'CUSTTMPL_WMS_PALLET_LABEL');
			}
			
			if(printTemplateWOPalletLabelPDF)
			{
				printTemplateRecordCreate('WMS Default WO Pallet Label PDF Template', '~/src/Templates/WOPalletLabelPDFTemplate.xml');
			}
			if(printTemplateWOPalletLabelZPL)
			{
				printTemplateRecordCreate('WMS Default WO Pallet Label ZPL Template', '~/src/Templates/WOPalletLabelZPLTemplate.txt');
			}			
			if(printTemplateCartonItemLabelPDF)
			{
				printTemplateRecordCreate('WMS Default Carton Label PDF Template', '~/src/Templates/CartonLabelPDFTemplate.xml');
			}

			if(printTemplateCartonItemLabelZPL)
			{
				printTemplateRecordCreate('WMS Default Carton Label ZPL Template', '~/src/Templates/CartonLabelZPLTemplate.txt');
			}
			if(printTemplateCartonLabelAdvPDF)
			{
				printTemplateRecordCreate('WMS Default Carton Label Advanced PDF Template', 'CUSTTMPL_WMS_CARTON_LABEL');
			}

			if(printTemplateWOPalletLabelAdvPDF)
			{
				printTemplateRecordCreate('WMS Default WO Pallet Label Advanced PDF Template', 'CUSTTMPL_WMS_WOPALLET_LABEL');
			}

			if(printTemplateLotSerialItemLabelZPL)
			{
				printTemplateRecordCreate('WMS Default Item Label with Lot or Serial ZPL Template', '~/src/Templates/ItemLabelLotOrSerialZPLTemplate.txt');
			}
			if(printTemplateLotSerialItemLabelPDF)
			{
				printTemplateRecordCreate('WMS Default Item Label with Lot or Serial PDF Template', '~/src/Templates/ItemLabelLotOrSerialPDFTemplate.xml');
			}
			if(printTemplateLotSerialItemLabelAdvPDF)
			{
				printTemplateRecordCreate('WMS Default Item Label with Lot or Serial Advanced PDF Template', 'CUSTTMPL_WMS_ITEM_LOT_SERIAL_LABEL');
			}
			if(printTemplateLotSerialPalletLabelZPL)
			{
				printTemplateRecordCreate('WMS Default Pallet Label with Lot or Serial ZPL Template', '~/src/Templates/PalletLabelLotOrSerialZPLTemplate.txt');
			}
			if(printTemplateLotSerialPalletLabelPDF)
			{
				printTemplateRecordCreate('WMS Default Pallet Label with Lot or Serial PDF Template', '~/src/Templates/PalletLabelLotOrSerialPDFTemplate.xml');
			}
			if(printTemplateLotSerialPalletLabelAdvPDF)
			{
				printTemplateRecordCreate('WMS Default Pallet Label with Lot or Serial Advanced PDF Template', 'CUSTTMPL_WMS_PALLET_LOT_SERIAL_LABEL');
			}

			if(printTemplateLotSerialWOPalletLabelZPL)
			{
				printTemplateRecordCreate('WMS Default WO Pallet Label with Lot or Serial ZPL Template', '~/src/Templates/WOPalletLabelLotOrSerialZPLTemplate.txt');
			}
			if(printTemplateLotSerialPalletLabelAdvPDF)
			{
				printTemplateRecordCreate('WMS Default WO Pallet Label with Lot or Serial PDF Template', '~/src/Templates/WOPalletLabelLotOrSerialPDFTemplate.txt');
			}
			if(printTemplateLotSerialPalletLabelAdvPDF)
			{
				printTemplateRecordCreate('WMS Default WO Pallet Label with Lot or Serial Advanced PDF Template', 'CUSTTMPL_WMS_WO_PALLET_LOT_SERIAL_LABEL');
			}
			
		}
	}

	function printTemplateRecordCreate(templateName, templatePath)
	{
		try
		{
			var printTemplateRec = record.create({type:'customrecord_print_templates'
			});
			printTemplateRec.setValue({fieldId: 'name',   value: templateName});
			printTemplateRec.setValue({fieldId: 'custrecord_print_template_app_name',   value: 'NSWMS'});
			printTemplateRec.setValue({fieldId: 'custrecord_print_label_template_path',   value: templatePath});
			printTemplateRec.setValue({fieldId: 'custrecord_print_t_is_locked',   value: true});
			printTemplateRec.save();	
		}
		catch(ex)
		{
			log.error('templateName :', templateName);
			log.error('Exception while creating Report Type', ex);
		}
	}

	function createReportType()
	{
		// Report Type
		var recordType = 'customrecord_print_report_type';
		var columns = [{name: 'name'},
					   {name: 'internalid'},
					   {name: 'custrecord_print_rt_is_locked'}
						];

		var searchResult = printRecordSearch(recordType, columns);

		if(searchResult.length == 0)
		{
			try{
				printReportTypeRecordCreate('WMS-Item label');
				printReportTypeRecordCreate('WMS-Pallet label');
				printReportTypeRecordCreate('WMS-Carton label');
				printReportTypeRecordCreate('WMS-WO Pallet label');
				printReportTypeRecordCreate('WMS Item Label with Lot or Serial');
				printReportTypeRecordCreate('WMS Pallet Label with Lot or Serial');
				printReportTypeRecordCreate('WMS WO Pallet Label with Lot or Serial');
				
			}catch(ex){
				log.error('Exception while creating Report Type', ex);
			}
		}
		else if(searchResult.length > 0)
		{
			var reportTypeItemLabel = true;
			var reportTypePalletLabel = true;
			var reportTypeCartonLabel = true;
			var reportTypeWOPalletLabel = true;
			var reportTypeLotserialItemLabel = true;
			var reportTypeLotserialPalletLabel = true;
			var reportTypeLotserialWOPalletLabel = true;

			for(var i = 0; i< searchResult.length; i++)
			{
				var columnsObject = new Object();
				var internalId = searchResult[i].getValue({name:'internalid'});
				if(searchResult[i].getValue({name:'name'}) == 'WMS-Item label'){
					if(searchResult[i].getValue({name:'custrecord_print_rt_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rt_is_locked'] = true;
						printRecordUpdate('customrecord_print_report_type', internalId, columnsObject);
					}
					reportTypeItemLabel = false;
				}
				else if(searchResult[i].getValue({name:'name'}) == 'ItemLabel'){
					columnsObject['name'] = 'WMS-Item label';

					record.submitFields({
						type: 'customrecord_print_report_type',
						id: searchResult[i].getValue({name:'internalid'}),
						values:columnsObject
					});
					reportTypeItemLabel = false;
				}

				if(searchResult[i].getValue({name:'name'}) == 'WMS-Pallet label'){
					if(searchResult[i].getValue({name:'custrecord_print_rt_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rt_is_locked'] = true;
						printRecordUpdate('customrecord_print_report_type', internalId, columnsObject);
					}
					reportTypePalletLabel = false;
				}
				else if(searchResult[i].getValue({name:'name'}) == 'PalletLabel'){
					columnsObject['name'] = 'WMS-Pallet label';

					record.submitFields({
						type: 'customrecord_print_report_type',
						id: searchResult[i].getValue({name:'internalid'}),
						values:columnsObject
					});					
					reportTypePalletLabel = false;
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-Carton label'){
					if(searchResult[i].getValue({name:'custrecord_print_rt_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rt_is_locked'] = true;
						printRecordUpdate('customrecord_print_report_type', internalId, columnsObject);
					}
					reportTypeCartonLabel = false;
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-WO Pallet label'){
					if(searchResult[i].getValue({name:'custrecord_print_rt_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rt_is_locked'] = true;
						printRecordUpdate('customrecord_print_report_type', internalId, columnsObject);
					}
					reportTypeWOPalletLabel = false;
				}

				if(searchResult[i].getValue({name:'name'}) == 'WMS Item Label with Lot or Serial'){
					if(searchResult[i].getValue({name:'custrecord_print_rt_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rt_is_locked'] = true;
						printRecordUpdate('customrecord_print_report_type', internalId, columnsObject);
					}
					reportTypeLotserialItemLabel = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Pallet Label with Lot or Serial'){
					if(searchResult[i].getValue({name:'custrecord_print_rt_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rt_is_locked'] = true;
						printRecordUpdate('customrecord_print_report_type', internalId, columnsObject);
					}
					reportTypeLotserialPalletLabel = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS WO Pallet Label with Lot or Serial'){
					if(searchResult[i].getValue({name:'custrecord_print_rt_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rt_is_locked'] = true;
						printRecordUpdate('customrecord_print_report_type', internalId, columnsObject);
					}
					reportTypeLotserialWOPalletLabel = false;
				}
				
			}

			if(reportTypeItemLabel)
			{
				try{
					printReportTypeRecordCreate('WMS-Item label');
				}catch(ex){
					log.error('Exception while creating Report Type - WMS-Item label', ex);
				}
			}
			if(reportTypePalletLabel)
			{
				try{
					printReportTypeRecordCreate('WMS-Pallet label');				
				}catch(ex){
					log.error('Exception while creating Report Type - WMS-Pallet label', ex);
				}
			}
			
			if(reportTypeCartonLabel)
			{
				try{
					printReportTypeRecordCreate('WMS-Carton label');
				}catch(ex){
					log.error('Exception while creating Report Type - WMS-Carton label', ex);
				}
			}
			if(reportTypeWOPalletLabel)
			{
				try{
					printReportTypeRecordCreate('WMS-WO Pallet label');				
				}catch(ex){
					log.error('Exception while creating Report Type - WMS-WO Pallet label', ex);
				}
			}
			if(reportTypeLotserialItemLabel)
			{
				try{
					printReportTypeRecordCreate('WMS Item Label with Lot or Serial');
				}catch(ex){
					log.error('Exception while creating Report Type - WMS Item Label with Lot or Serial', ex);
				}
			}
			if(reportTypeLotserialPalletLabel)
			{
				try{
					printReportTypeRecordCreate('WMS Pallet Label with Lot or Serial');
				}catch(ex){
					log.error('Exception while creating Report Type - WMS Pallet Label with Lot or Serial', ex);
				}
			}
			if(reportTypeLotserialWOPalletLabel){
				try{
					printReportTypeRecordCreate('WMS WO Pallet Label with Lot or Serial');
				}catch(ex){
					log.error('Exception while creating Report Type - WMS Pallet Label with Lot or Serial', ex);
				}

			}
		}
	}

	function printReportTypeRecordCreate(reportTypeName)
	{
		try
		{
			var reportTypeRec = record.create({type:'customrecord_print_report_type'
			});
			reportTypeRec.setValue({fieldId: 'name',   value: reportTypeName});
			reportTypeRec.setValue({fieldId: 'custrecord_print_rt_is_locked',   value: true});
			reportTypeRec.save();
		}
		catch(ex)
		{
			log.error('Exception while creating Report Type', ex);
		}
	}

	function createRuleGroup()
	{
		// Rule Group
		var recordType = 'customrecord_print_rule_group';
		var columns = [{name: 'custrecord_print_rule_group_sourceid'},
						{name: 'name'},
						{name: 'custrecord_print_rule_group_sourcetype'},
						{name: 'custrecord_print_report_field_type'},
						{name: 'internalid'},
						{name: 'custrecord_print_rg_is_locked'}
						];

		var searchResult = printRecordSearch(recordType, columns);

		if(searchResult.length == 0)
		{
			printRuleGroupRecordCreate('WMS-Item label-Printer', 'WMS-Item label');
			printRuleGroupRecordCreate('WMS-Item label-Template', 'WMS-Item label');
			printRuleGroupRecordCreate('WMS-Item label-NoOfCopies', 'WMS-Item label');
			printRuleGroupRecordCreate('WMS-Pallet label-Printer', 	'WMS-Pallet label');
			printRuleGroupRecordCreate('WMS-Pallet label-Template', 'WMS-Pallet label');
			printRuleGroupRecordCreate('WMS-Pallet label-NoOfCopies', 'WMS-Pallet label');
			printRuleGroupRecordCreate('WMS-Carton label-Printer', 'WMS-Carton label');
			printRuleGroupRecordCreate('WMS-Carton label-Template', 'WMS-Carton label');
			printRuleGroupRecordCreate('WMS-Carton label-NoOfCopies', 'WMS-Carton label');
			printRuleGroupRecordCreate('WMS-WO Pallet label-Printer', 	'WMS-WO Pallet label');
			printRuleGroupRecordCreate('WMS-WO Pallet label-Template', 'WMS-WO Pallet label');
			printRuleGroupRecordCreate('WMS-WO Pallet label-NoOfCopies', 'WMS-WO Pallet label');
			printRuleGroupRecordCreate('WMS Item Label with Lot or Serial-Printer', 'WMS Item Label with Lot or Serial');
			printRuleGroupRecordCreate('WMS Item Label with Lot or Serial-Template', 'WMS Item Label with Lot or Serial');
			printRuleGroupRecordCreate('WMS Item Label with Lot or Serial-NoOfCopies', 'WMS Item Label with Lot or Serial');
			printRuleGroupRecordCreate('WMS Pallet Label with Lot or Serial-Printer', 'WMS Pallet Label with Lot or Serial');
			printRuleGroupRecordCreate('WMS Pallet Label with Lot or Serial-Template', 'WMS Pallet Label with Lot or Serial');
			printRuleGroupRecordCreate('WMS Pallet Label with Lot or Serial-NoOfCopies', 'WMS Pallet Label with Lot or Serial');
			printRuleGroupRecordCreate('WMS WO Pallet Label with Lot or Serial-Printer', 'WMS WO Pallet Label with Lot or Serial');
			printRuleGroupRecordCreate('WMS WO Pallet Label with Lot or Serial-Template', 'WMS WO Pallet Label with Lot or Serial');
			printRuleGroupRecordCreate('WMS WO Pallet Label with Lot or Serial-NoOfCopies', 'WMS WO Pallet Label with Lot or Serial');


		}
		else if(searchResult.length > 0)
		{
			var rulegrpItemPrinter = true;
			var rulegrpItemTemplate = true;
			var rulegrpItemNoOfCopies = true;
			var rulegrpPalletPrinter = true;
			var rulegrpPalletTemplate = true;
			var rulegrpPalletNoOfCopies = true;
			var rulegrpCartonPrinter = true;
			var rulegrpCartonTemplate = true;
			var rulegrpCartonNoOfCopies = true;
			var rulegrpWOPalletPrinter = true;
			var rulegrpWOPalletTemplate = true;
			var rulegrpWOPalletNoOfCopies = true;
			var rulegrpLotSerialItemPrinter = true;
			var rulegrpLotSerialItemTemplate = true;
			var rulegrpLotSerialItemNoOfCopies = true;
			var rulegrpLotSerialPalletPrinter = true;
			var rulegrpLotSerialPalletTemplate = true;
			var rulegrpLotSerialPalletNoOfCopies = true;
			var rulegrpLotSerialWOPalletPrinter = true;
			var rulegrpLotSerialWOPalletTemplate = true;
			var rulegrpLotSerialWOPalletNoOfCopies = true;

			for(var i = 0; i< searchResult.length; i++)
			{
				var columnsObject = new Object();
				var internalId = searchResult[i].getValue({name:'internalid'});

				if(searchResult[i].getValue({name:'name'}) == 'ItemLabel-Printer' && 
						searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint')
				{
					try{
						var RecToUpdate = record.load({type:'customrecord_print_rule_group', id:internalId});
						RecToUpdate.setText({fieldId:'custrecord_print_report_field_type', text:'WMS-Item label'});
						RecToUpdate.setText({fieldId:'name', text:'WMS-Item label-Printer'});
						RecToUpdate.save();
						rulegrpItemPrinter = false;
					}
					catch(ex){
						log.error('Exception while updating Rule Group - WMS-Item label-Printer', ex);
					}
				}
				else if(searchResult[i].getValue({name:'name'}) == 'WMS-Item label-Printer' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpItemPrinter = false;
				}


				if(searchResult[i].getValue({name:'name'}) == 'ItemLabel-Template' && 
						searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){

					try{
						var RecToUpdate = record.load({type:'customrecord_print_rule_group', id:internalId});
						RecToUpdate.setText({fieldId:'custrecord_print_report_field_type', text:'WMS-Item label'});
						RecToUpdate.setText({fieldId:'name', text:'WMS-Item label-Template'});
						RecToUpdate.save();
						rulegrpItemTemplate = false;
					}
					catch(ex){
						log.error('Exception while updating Rule Group - WMS-Item label-Template', ex);
					}
				}
				else if(searchResult[i].getValue({name:'name'}) == 'WMS-Item label-Template' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpItemTemplate = false;
				}


				if(searchResult[i].getValue({name:'name'}) == 'ItemLabel-NoOfCopies' && 
						searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){

					try{
						var RecToUpdate = record.load({type:'customrecord_print_rule_group', id:internalId});
						RecToUpdate.setText({fieldId:'custrecord_print_report_field_type', text:'WMS-Item label'});
						RecToUpdate.setText({fieldId:'name', text:'WMS-Item label-NoOfCopies'});
						RecToUpdate.save();
						rulegrpItemNoOfCopies = false;
					}
					catch(ex){
						log.error('Exception while updating Rule Group - ItemLabel-NoOfCopies', ex);
					}
				}
				else if(searchResult[i].getValue({name:'name'}) == 'WMS-Item label-NoOfCopies' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpItemNoOfCopies = false;
				}


				if(searchResult[i].getValue({name:'name'}) == 'PalletLabel-Printer' && 
						searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){

					try{
						var RecToUpdate = record.load({type:'customrecord_print_rule_group', id:internalId});
						RecToUpdate.setText({fieldId:'custrecord_print_report_field_type', text:'WMS-Pallet label'});
						RecToUpdate.setText({fieldId:'name', text:'WMS-Pallet label-Printer'});
						RecToUpdate.save();
						rulegrpPalletPrinter = false;
					}catch(ex){
						log.error('Exception while updating Rule Group - PalletLabel-Printer', ex);
					}
				}
				else if(searchResult[i].getValue({name:'name'}) == 'WMS-Pallet label-Printer' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpPalletPrinter = false;
				}


				if(searchResult[i].getValue({name:'name'}) == 'PalletLabel-Template' && 
						searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){

					try{
						var RecToUpdate = record.load({type:'customrecord_print_rule_group', id:internalId});
						RecToUpdate.setText({fieldId:'custrecord_print_report_field_type', text:'WMS-Pallet label'});
						RecToUpdate.setText({fieldId:'name', text:'WMS-Pallet label-Template'});
						RecToUpdate.save();
						rulegrpPalletTemplate = false;
					}
					catch(ex){
						log.error('Exception while updating Rule Group - PalletLabel-Template', ex);
					}
				}
				else if(searchResult[i].getValue({name:'name'}) == 'WMS-Pallet label-Template' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpPalletTemplate = false;
				}



				if(searchResult[i].getValue({name:'name'}) == 'PalletLabel-NoOfCopies' && 
						searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){

					try{
						var RecToUpdate = record.load({type:'customrecord_print_rule_group', id:internalId});
						RecToUpdate.setText({fieldId:'custrecord_print_report_field_type', text:'WMS-Pallet label'});
						RecToUpdate.setText({fieldId:'name', text:'WMS-Pallet label-NoOfCopies'});
						RecToUpdate.save();
						rulegrpPalletNoOfCopies = false;
					}
					catch(ex){
						log.error('Exception while updating Rule Group - PalletLabel-NoOfCopies', ex);
					}
				}
				else if(searchResult[i].getValue({name:'name'}) == 'WMS-Pallet label-NoOfCopies' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpPalletNoOfCopies = false;
				}
				
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-Carton label-Printer' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpCartonPrinter = false;
				}
				
			
				if(searchResult[i].getValue({name:'name'}) == 'WMS-Carton label-Template' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpCartonTemplate = false;
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-Carton label-NoOfCopies' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpCartonNoOfCopies = false;
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-WO Pallet label-Printer' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpWOPalletPrinter = false;
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-WO Pallet label-Template' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpWOPalletTemplate = false;
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-WO Pallet label-NoOfCopies' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpWOPalletNoOfCopies = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Item Label with Lot or Serial-Printer' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpLotSerialItemPrinter = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Item Label with Lot or Serial-Template' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpLotSerialItemTemplate = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Item Label with Lot or Serial-NoOfCopies' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpLotSerialItemNoOfCopies = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Pallet Label with Lot or Serial-Printer' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpLotSerialPalletPrinter = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Pallet Label with Lot or Serial-Template' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpLotSerialPalletTemplate = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Pallet Label with Lot or Serial-NoOfCopies' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpLotSerialPalletNoOfCopies = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS WO Pallet Label with Lot or Serial-Printer' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpLotSerialWOPalletPrinter = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS WO Pallet Label with Lot or Serial-Template' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpLotSerialWOPalletTemplate = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS WO Pallet Label with Lot or Serial-NoOfCopies' && searchResult[i].getValue({name:'custrecord_print_rule_group_sourceid'}) == 'customrecord_wms_rule_evaluatn_autoprint'){
					if(searchResult[i].getValue({name:'custrecord_print_rg_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rg_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_group', internalId, columnsObject);
					}
					rulegrpLotSerialWOPalletNoOfCopies = false;
				}
				
			}

			try{
				if(rulegrpItemPrinter)
				{
					printRuleGroupRecordCreate('WMS-Item label-Printer', 'WMS-Item label');
				}
				if(rulegrpItemTemplate)
				{
					printRuleGroupRecordCreate('WMS-Item label-Template', 'WMS-Item label');
				}
				if(rulegrpItemNoOfCopies)
				{
					printRuleGroupRecordCreate('WMS-Item label-NoOfCopies', 'WMS-Item label');
				}
				if(rulegrpPalletPrinter)
				{
					printRuleGroupRecordCreate('WMS-Pallet label-Printer', 	'WMS-Pallet label');
				}
				if(rulegrpPalletTemplate)
				{
					printRuleGroupRecordCreate('WMS-Pallet label-Template', 'WMS-Pallet label');
				}
				if(rulegrpPalletNoOfCopies)
				{
					printRuleGroupRecordCreate('WMS-Pallet label-NoOfCopies', 'WMS-Pallet label');
				}
				if(rulegrpCartonPrinter)
				{
					printRuleGroupRecordCreate('WMS-Carton label-Printer', 'WMS-Carton label');
				}
				if(rulegrpCartonTemplate)
				{
					printRuleGroupRecordCreate('WMS-Carton label-Template', 'WMS-Carton label');
				}
				if(rulegrpCartonNoOfCopies)
				{
					printRuleGroupRecordCreate('WMS-Carton label-NoOfCopies', 'WMS-Carton label');
				}
				if(rulegrpWOPalletPrinter)
				{
					printRuleGroupRecordCreate('WMS-WO Pallet label-Printer', 	'WMS-WO Pallet label');
				}
				if(rulegrpWOPalletTemplate)
				{
					printRuleGroupRecordCreate('WMS-WO Pallet label-Template', 'WMS-WO Pallet label');
				}
				if(rulegrpWOPalletNoOfCopies)
				{
					printRuleGroupRecordCreate('WMS-WO Pallet label-NoOfCopies', 'WMS-WO Pallet label');
				}
				if(rulegrpLotSerialItemPrinter)
				{
					printRuleGroupRecordCreate('WMS Item Label with Lot or Serial-Printer', 'WMS Item Label with Lot or Serial');
				}
				if(rulegrpLotSerialItemTemplate)
				{
					printRuleGroupRecordCreate('WMS Item Label with Lot or Serial-Template', 'WMS Item Label with Lot or Serial');
				}
				if(rulegrpLotSerialItemNoOfCopies)
				{
					printRuleGroupRecordCreate('WMS Item Label with Lot or Serial-NoOfCopies', 'WMS Item Label with Lot or Serial');
				}
				if(rulegrpLotSerialPalletPrinter)
				{
					printRuleGroupRecordCreate('WMS Pallet Label with Lot or Serial-Printer', 'WMS Pallet Label with Lot or Serial');
				}
				if(rulegrpLotSerialPalletTemplate)
				{
					printRuleGroupRecordCreate('WMS Pallet Label with Lot or Serial-Template', 'WMS Pallet Label with Lot or Serial');
				}
				if(rulegrpLotSerialPalletNoOfCopies)
				{
					printRuleGroupRecordCreate('WMS Pallet Label with Lot or Serial-NoOfCopies', 'WMS Pallet Label with Lot or Serial');
				}
				if(rulegrpLotSerialWOPalletPrinter)
				{
					printRuleGroupRecordCreate('WMS WO Pallet Label with Lot or Serial-Printer', 'WMS WO Pallet Label with Lot or Serial');
				}
				if(rulegrpLotSerialWOPalletTemplate)
				{
					printRuleGroupRecordCreate('WMS WO Pallet Label with Lot or Serial-Template', 'WMS WO Pallet Label with Lot or Serial');
				}
				if(rulegrpLotSerialWOPalletNoOfCopies)
				{
					printRuleGroupRecordCreate('WMS WO Pallet Label with Lot or Serial-NoOfCopies', 'WMS WO Pallet Label with Lot or Serial');
				}
			}
			catch(ex){
				log.error('Exception while creating Rule Group', ex);
			}
		}
	}

	function printRuleGroupRecordCreate(ruleGroupName , reportType)
	{
		try{
			var rulegrouprec = record.create({type:'customrecord_print_rule_group'
			});
			rulegrouprec.setValue({fieldId: 'name',   value: ruleGroupName});
			rulegrouprec.setValue({fieldId: 'custrecord_print_rule_group_sourceid',   value: 'customrecord_wms_rule_evaluatn_autoprint'});
			rulegrouprec.setText({fieldId:'custrecord_print_rule_group_sourcetype', text:'Record'});
			rulegrouprec.setText({fieldId:'custrecord_print_report_field_type', text:reportType});
			rulegrouprec.setValue({fieldId:'custrecord_print_rg_is_locked', value:true});
			rulegrouprec.save();
		}
		catch(ex)
		{
			log.error('ruleGroupName', ruleGroupName);
			log.error('Exception while creating Rule Group', ex);
		}
	}

	function createRuleMap()
	{
		// Rule Mapping
		var recordType = 'customrecord_print_rule_mappings';
		var columns = [{name: 'custrecord_print_key_rulemap'},
						{name: 'name'},
						{name: 'custrecord_print_inout'},
						{name: 'custrecord_print_item_column_id'},
						{name: 'internalid'},
						{name: 'custrecord_print_rm_is_locked'}
						];

		var searchResult = printRecordSearch(recordType, columns);

		if(searchResult.length == 0)
		{
			printRuleMapRecordCreate('WMS-Item label-Printer' , 'custrecord_print_printer' , 'WMS-Item label-Printer', 'Text');
			printRuleMapRecordCreate('WMS-Item label-Template' , 'custrecord_print_template' , 'WMS-Item label-Template', 'Text');
			printRuleMapRecordCreate('WMS-Item label-NoOfCopies' , 'custrecord_print_no_of_copies' , 'WMS-Item label-NoOfCopies', 'Value');
			printRuleMapRecordCreate('WMS-Pallet label-Printer' , 'custrecord_print_printer' , 'WMS-Pallet label-Printer', 'Text');
			printRuleMapRecordCreate('WMS-Pallet label-Template' , 'custrecord_print_template' , 'WMS-Pallet label-Template', 'Text');
			printRuleMapRecordCreate('WMS-Pallet label-NoOfCopies' , 'custrecord_print_no_of_copies' , 'WMS-Pallet label-NoOfCopies', 'Value');
			printRuleMapRecordCreate('WMS-Carton label-Printer' , 'custrecord_print_printer' , 'WMS-Carton label-Printer', 'Text');
			printRuleMapRecordCreate('WMS-Carton label-Template' , 'custrecord_print_template' , 'WMS-Carton label-Template', 'Text');
			printRuleMapRecordCreate('WMS-Carton label-NoOfCopies' , 'custrecord_print_no_of_copies' , 'WMS-Carton label-NoOfCopies', 'Value');
			printRuleMapRecordCreate('WMS-WO Pallet label-Printer' , 'custrecord_print_printer' , 'WMS-WO Pallet label-Printer', 'Text');
			printRuleMapRecordCreate('WMS-WO Pallet label-Template' , 'custrecord_print_template' , 'WMS-WO Pallet label-Template', 'Text');
			printRuleMapRecordCreate('WMS-WO Pallet label-NoOfCopies' , 'custrecord_print_no_of_copies' , 'WMS-WO Pallet label-NoOfCopies', 'Value');
			printRuleMapRecordCreate('WMS Item Label with Lot or Serial-Printer' , 'custrecord_print_printer' , 'WMS Item Label with Lot or Serial-Printer', 'Text');
			printRuleMapRecordCreate('WMS Item Label with Lot or Serial-Template' , 'custrecord_print_template' , 'WMS Item Label with Lot or Serial-Template', 'Text');
			printRuleMapRecordCreate('WMS Item Label with Lot or Serial-NoOfCopies' , 'custrecord_print_no_of_copies' , 'WMS Item Label with Lot or Serial-NoOfCopies', 'Value');
			printRuleMapRecordCreate('WMS Pallet Label with Lot or Serial-Printer' , 'custrecord_print_printer' , 'WMS Pallet Label with Lot or Serial-Printer', 'Text');
			printRuleMapRecordCreate('WMS Pallet Label with Lot or Serial-Template' , 'custrecord_print_template' , 'WMS Pallet Label with Lot or Serial-Template', 'Text');
			printRuleMapRecordCreate('WMS Pallet Label with Lot or Serial-NoOfCopies' , 'custrecord_print_no_of_copies' , 'WMS Pallet Label with Lot or Serial-NoOfCopies', 'Value');
			printRuleMapRecordCreate('WMS WO Pallet Label with Lot or Serial-Printer' , 'custrecord_print_printer' , 'WMS WO Pallet Label with Lot or Serial-Printer', 'Text');
			printRuleMapRecordCreate('WMS WO Pallet Label with Lot or Serial-Template' , 'custrecord_print_template' , 'WMS WO Pallet Label with Lot or Serial-Template', 'Text');
			printRuleMapRecordCreate('WMS WO Pallet Label with Lot or Serial-NoOfCopies' , 'custrecord_print_no_of_copies' , 'WMS WO Pallet Label with Lot or Serial-NoOfCopies', 'Value');

		}
		else if(searchResult.length > 0)
		{
			var rulemapItemPrinter = true;
			var rulemapItemTemplate = true;
			var rulemapItemNoOfCopies = true;
			var rulemapPalletPrinter = true;			
			var rulemapPalletTemplate = true;
			var rulemapPalletNoOfCopies = true;
			var rulemapCartonPrinter = true;
			var rulemapCartonTemplate = true;
			var rulemapCartonNoOfCopies = true;
			var rulemapWOPalletPrinter = true;			
			var rulemapWOPalletTemplate = true;
			var rulemapWOPalletNoOfCopies = true;
			var rulemapLotSerialItemPrinter = true;
			var rulemapLotSerialItemTemplate = true;
			var rulemapLotSerialItemNoOfCopies = true;
			var rulemapLotSerialPalletPrinter = true;
			var rulemapLotSerialPalletTemplate = true;
			var rulemapLotSerialPalletNoOfCopies = true;
			var rulemapLotSerialWOPalletPrinter = true;
			var rulemapLotSerialWOPalletTemplate = true;
			var rulemapLotSerialWOPalletNoOfCopies = true;

			for(var i = 0; i< searchResult.length; i++){
				try{
					var columnsObject = new Object();
					var internalId = searchResult[i].getValue({name:'internalid'});

					if(searchResult[i].getValue({name:'name'}) == 'ItemLabel-Printer' 
						&& (searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'ItemLabel-Printer' || 
								searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-Item label-Printer')
						&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){

						var RecToUpdate = record.load({type:'customrecord_print_rule_mappings', id:internalId});
						RecToUpdate.setValue({fieldId: 'custrecord_print_item_column_id',   value: 'custrecord_print_printer'});
						RecToUpdate.setText({fieldId:'custrecord_print_item_column_type', text:'Text'});
						RecToUpdate.setText({fieldId:'name', text:'WMS-Item label-Printer'});
						RecToUpdate.setText({fieldId:'custrecord_print_key_rulemap', text:'WMS-Item label-Printer'});
						RecToUpdate.save();
						rulemapItemPrinter = false;
					}
					else if(searchResult[i].getValue({name:'name'}) == 'WMS-Item label-Printer' 
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-Item label-Printer'
							&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapItemPrinter = false;
					}

					if(searchResult[i].getValue({name:'name'}) == 'ItemLabel-Template' 
						&& (searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'ItemLabel-Template' || 
								searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-Item label-Template')
								&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){


						var RecToUpdate = record.load({type:'customrecord_print_rule_mappings', id:internalId});
						RecToUpdate.setValue({fieldId: 'custrecord_print_item_column_id',   value: 'custrecord_print_template'});
						RecToUpdate.setText({fieldId:'custrecord_print_item_column_type', text:'Text'});
						RecToUpdate.setText({fieldId:'name', text:'WMS-Item label-Template'});
						RecToUpdate.setText({fieldId:'custrecord_print_key_rulemap', text:'WMS-Item label-Template'});

						RecToUpdate.save();
						rulemapItemTemplate = false;

					}
					else if(searchResult[i].getValue({name:'name'}) == 'WMS-Item label-Template' 
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-Item label-Template'
							&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapItemTemplate = false;
					}


					if(searchResult[i].getValue({name:'name'}) == 'ItemLabel-NoOfCopies' 
						&& (searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'ItemLabel-NoOfCopies' || 
								searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-Item label-NoOfCopies')
							&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){

						var RecToUpdate = record.load({type:'customrecord_print_rule_mappings', id:internalId});
						RecToUpdate.setValue({fieldId: 'custrecord_print_item_column_id',   value: 'custrecord_print_no_of_copies'});
						RecToUpdate.setText({fieldId:'custrecord_print_item_column_type', text:'Value'});
						RecToUpdate.setText({fieldId:'name', text:'WMS-Item label-NoOfCopies'});
						RecToUpdate.setText({fieldId:'custrecord_print_key_rulemap', text:'WMS-Item label-NoOfCopies'});

						RecToUpdate.save();
						rulemapItemNoOfCopies = false;
					}
					else if(searchResult[i].getValue({name:'name'}) == 'WMS-Item label-NoOfCopies' && 
							searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-Item label-NoOfCopies'
								&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapItemNoOfCopies = false;
					}


					if(searchResult[i].getValue({name:'name'}) == 'PalletLabel-Printer' 
						&& (searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'PalletLabel-Printer' || 
								searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-Pallet label-Printer') 
								&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){

						var RecToUpdate = record.load({type:'customrecord_print_rule_mappings', id:internalId});
						RecToUpdate.setValue({fieldId: 'custrecord_print_item_column_id',   value: 'custrecord_print_printer'});
						RecToUpdate.setText({fieldId:'custrecord_print_item_column_type', text:'Text'});
						RecToUpdate.setText({fieldId:'name', text:'WMS-Pallet label-Printer'});
						RecToUpdate.setText({fieldId:'custrecord_print_key_rulemap', text:'WMS-Pallet label-Printer'});

						RecToUpdate.save();
						rulemapPalletPrinter = false;
					}
					else if(searchResult[i].getValue({name:'name'}) == 'WMS-Pallet label-Printer' 
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-Pallet label-Printer'
							&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapPalletPrinter = false;
					}


					if(searchResult[i].getValue({name:'name'}) == 'PalletLabel-Template' 
						&& (searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'PalletLabel-Template' ||
								searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-Pallet label-Template') 
							&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){


						var RecToUpdate = record.load({type:'customrecord_print_rule_mappings', id:internalId});
						RecToUpdate.setValue({fieldId: 'custrecord_print_item_column_id',   value: 'custrecord_print_template'});
						RecToUpdate.setText({fieldId:'custrecord_print_item_column_type', text:'Text'});
						RecToUpdate.setText({fieldId:'name', text:'WMS-Pallet label-Template'});
						RecToUpdate.setText({fieldId:'custrecord_print_key_rulemap', text:'WMS-Pallet label-Template'});

						RecToUpdate.save();
						rulemapPalletTemplate = false;
					}
					else if(searchResult[i].getValue({name:'name'}) == 'WMS-Pallet label-Template' 
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-Pallet label-Template'
							&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						var rulemapPalletTemplate = false;
					}

					if(searchResult[i].getValue({name:'name'}) == 'PalletLabel-NoOfCopies' 
						&& (searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'PalletLabel-NoOfCopies' || 
								searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-Pallet label-NoOfCopies') 
							&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){

						var RecToUpdate = record.load({type:'customrecord_print_rule_mappings', id:internalId});
						RecToUpdate.setValue({fieldId: 'custrecord_print_item_column_id',   value: 'custrecord_print_no_of_copies'});
						RecToUpdate.setText({fieldId:'custrecord_print_item_column_type', text:'Value'});
						RecToUpdate.setText({fieldId:'name', text:'WMS-Pallet label-NoOfCopies'});
						RecToUpdate.setText({fieldId:'custrecord_print_key_rulemap', text:'WMS-Pallet label-NoOfCopies'});

						RecToUpdate.save();
						rulemapPalletNoOfCopies = false;
					}
					else if(searchResult[i].getValue({name:'name'}) == 'WMS-Pallet label-NoOfCopies' 
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-Pallet label-NoOfCopies'
							&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapPalletNoOfCopies = false;
					}
					
					if(searchResult[i].getValue({name:'name'}) == 'WMS-Carton label-Printer' 
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-Carton label-Printer'
							&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapCartonPrinter = false;
					}
				
					if(searchResult[i].getValue({name:'name'}) == 'WMS-Carton label-Template' 
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-Carton label-Template'
							&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapCartonTemplate = false;
					}
					
					if(searchResult[i].getValue({name:'name'}) == 'WMS-Carton label-NoOfCopies' 
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-Carton label-NoOfCopies'
							&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapCartonNoOfCopies = false;
					}
					
					if(searchResult[i].getValue({name:'name'}) == 'WMS-WO Pallet label-Printer' 
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-WO Pallet label-Printer'
							&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapWOPalletPrinter = false;
					}
					
					if(searchResult[i].getValue({name:'name'}) == 'WMS-WO Pallet label-Template' 
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-WO Pallet label-Template'
							&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapWOPalletTemplate = false;
					}
					
					if(searchResult[i].getValue({name:'name'}) == 'WMS-WO Pallet label-NoOfCopies' 
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-WO Pallet label-NoOfCopies'
							&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapWOPalletNoOfCopies = false;
					}
					if(searchResult[i].getValue({name:'name'}) == 'WMS Item Label with Lot or Serial-Printer'
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS Item Label with Lot or Serial-Printer'
						&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapLotSerialItemPrinter = false;
					}
					if(searchResult[i].getValue({name:'name'}) == 'WMS Item Label with Lot or Serial-Template'
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS Item Label with Lot or Serial-Template'
						&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapLotSerialItemTemplate = false;
					}
					if(searchResult[i].getValue({name:'name'}) == 'WMS Item Label with Lot or Serial-NoOfCopies'
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS Item Label with Lot or Serial-NoOfCopies'
						&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapLotSerialItemNoOfCopies = false;
					}
					if(searchResult[i].getValue({name:'name'}) == 'WMS Pallet Label with Lot or Serial-Printer'
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS Pallet Label with Lot or Serial-Printer'
						&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapLotSerialPalletPrinter = false;
					}
					if(searchResult[i].getValue({name:'name'}) == 'WMS Pallet Label with Lot or Serial-Template'
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS Pallet Label with Lot or Serial-Template'
						&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapLotSerialPalletTemplate = false;
					}
					if(searchResult[i].getValue({name:'name'}) == 'WMS Pallet Label with Lot or Serial-NoOfCopies'
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS Pallet Label with Lot or Serial-NoOfCopies'
						&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapLotSerialPalletNoOfCopies = false;
					}
					if(searchResult[i].getValue({name:'name'}) == 'WMS WO Pallet Label with Lot or Serial-Printer'
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS WO Pallet Label with Lot or Serial-Printer'
						&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapLotSerialWOPalletPrinter = false;
					}
					if(searchResult[i].getValue({name:'name'}) == 'WMS WO Pallet Label with Lot or Serial-Template'
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS WO Pallet Label with Lot or Serial-Template'
						&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapLotSerialWOPalletTemplate = false;
					}
					if(searchResult[i].getValue({name:'name'}) == 'WMS WO Pallet Label with Lot or Serial-NoOfCopies'
						&& searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS WO Pallet Label with Lot or Serial-NoOfCopies'
						&& searchResult[i].getValue({name:'custrecord_print_inout'}) == true){
						if(searchResult[i].getValue({name:'custrecord_print_rm_is_locked'}) == false)
						{
							columnsObject['custrecord_print_rm_is_locked'] = true;
							printRecordUpdate('customrecord_print_rule_mappings', internalId, columnsObject);
						}
						rulemapLotSerialWOPalletNoOfCopies = false;
					}

//					Deleting the Old Data From Rule Mappings

					if(searchResult[i].getValue({name:'name'}) == 'ItemLabel-Printer-User')
					{

						var recToDel = record.delete({type:'customrecord_print_rule_mappings', id:internalId});
					}

					if(searchResult[i].getValue({name:'name'}) == 'ItemLabel-Printer-Printer')
					{

						var recToDel = record.delete({type:'customrecord_print_rule_mappings', id:internalId});
					}

					if(searchResult[i].getValue({name:'name'}) == 'ItemLabel-Printer-Location')
					{

						var recToDel = record.delete({type:'customrecord_print_rule_mappings', id:internalId});
					}

					if(searchResult[i].getValue({name:'name'}) == 'ItemLabel-Template-Template')
					{

						var recToDel = record.delete({type:'customrecord_print_rule_mappings', id:internalId});
					}

					if(searchResult[i].getValue({name:'name'}) == 'ItemLabel-Template-Item')
					{

						var recToDel = record.delete({type:'customrecord_print_rule_mappings', id:internalId});
					}

					if(searchResult[i].getValue({name:'name'}) == 'ItemLabel-Template-ItemFamily')
					{

						var recToDel = record.delete({type:'customrecord_print_rule_mappings', id:internalId});
					}

					if(searchResult[i].getValue({name:'name'}) == 'ItemLabel-Template-ItemGroup')
					{

						var recToDel = record.delete({type:'customrecord_print_rule_mappings', id:internalId});
					}

					if(searchResult[i].getValue({name:'name'}) == 'PalletLabel-Printer-User')
					{

						var recToDel = record.delete({type:'customrecord_print_rule_mappings', id:internalId});
					}

					if(searchResult[i].getValue({name:'name'}) == 'PalletLabel-Printer-Printer')
					{

						var recToDel = record.delete({type:'customrecord_print_rule_mappings', id:internalId});
					}

					if(searchResult[i].getValue({name:'name'}) == 'PalletLabel-Printer-Location')
					{

						var recToDel = record.delete({type:'customrecord_print_rule_mappings', id:internalId});
					}

					if(searchResult[i].getValue({name:'name'}) == 'PalletLabel-Template-Template')
					{

						var recToDel = record.delete({type:'customrecord_print_rule_mappings', id:internalId});
					}

					if(searchResult[i].getValue({name:'name'}) == 'PalletLabel-Template-Item')
					{

						var recToDel = record.delete({type:'customrecord_print_rule_mappings', id:internalId});
					}

					if(searchResult[i].getValue({name:'name'}) == 'PalletLabel-Template-ItemFamily')
					{

						var recToDel = record.delete({type:'customrecord_print_rule_mappings', id:internalId});
					}

					if(searchResult[i].getValue({name:'name'}) == 'PalletLabel-Template-ItemGroup')
					{

						var recToDel = record.delete({type:'customrecord_print_rule_mappings', id:internalId});
					}

					if(searchResult[i].getValue({name:'name'}) == 'ItemLabel-NoOfCopies' && (searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'ItemLabel-Template' ||
						searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-Item label-Template'))
					{

						var recToDel = record.delete({type:'customrecord_print_rule_mappings', id:internalId});
					}

					if(searchResult[i].getValue({name:'name'}) == 'PalletLabel-NoOfCopies' && (searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'PalletLabel-Template' ||
						searchResult[i].getText({name:'custrecord_print_key_rulemap'}) == 'WMS-Pallet label-Template'))
					{

						var recToDel = record.delete({type:'customrecord_print_rule_mappings', id:internalId});
					}					
				}
				catch(ex){
					log.error('Exception while updating Rule Mapping', ex);
				}
			}

			try{

				if(rulemapItemPrinter)
				{
					printRuleMapRecordCreate('WMS-Item label-Printer' , 'custrecord_print_printer' , 'WMS-Item label-Printer', 'Text');
				}
				if(rulemapItemTemplate)
				{
					printRuleMapRecordCreate('WMS-Item label-Template' , 'custrecord_print_template' , 'WMS-Item label-Template', 'Text');
				}
				if(rulemapItemNoOfCopies)
				{
					printRuleMapRecordCreate('WMS-Item label-NoOfCopies' , 'custrecord_print_no_of_copies' , 'WMS-Item label-NoOfCopies', 'Value');
				}
				if(rulemapPalletPrinter)
				{
					printRuleMapRecordCreate('WMS-Pallet label-Printer' , 'custrecord_print_printer' , 'WMS-Pallet label-Printer', 'Text');
				}
				if(rulemapPalletTemplate)
				{
					printRuleMapRecordCreate('WMS-Pallet label-Template' , 'custrecord_print_template' , 'WMS-Pallet label-Template', 'Text');
				}
				if(rulemapPalletNoOfCopies)
				{
					printRuleMapRecordCreate('WMS-Pallet label-NoOfCopies' , 'custrecord_print_no_of_copies' , 'WMS-Pallet label-NoOfCopies', 'Value');
				}
				
				if(rulemapCartonPrinter)
				{
					printRuleMapRecordCreate('WMS-Carton label-Printer' , 'custrecord_print_printer' , 'WMS-Carton label-Printer', 'Text');
				}
				if(rulemapCartonTemplate)
				{
					printRuleMapRecordCreate('WMS-Carton label-Template' , 'custrecord_print_template' , 'WMS-Carton label-Template', 'Text');
				}
				if(rulemapCartonNoOfCopies)
				{
					printRuleMapRecordCreate('WMS-Carton label-NoOfCopies' , 'custrecord_print_no_of_copies' , 'WMS-Carton label-NoOfCopies', 'Value');
				}
				if(rulemapWOPalletPrinter)
				{
					printRuleMapRecordCreate('WMS-WO Pallet label-Printer' , 'custrecord_print_printer' , 'WMS-WO Pallet label-Printer', 'Text');
				}
				if(rulemapWOPalletTemplate)
				{
					printRuleMapRecordCreate('WMS-WO Pallet label-Template' , 'custrecord_print_template' , 'WMS-WO Pallet label-Template', 'Text');
				}
				if(rulemapWOPalletNoOfCopies)
				{
					printRuleMapRecordCreate('WMS-WO Pallet label-NoOfCopies' , 'custrecord_print_no_of_copies' , 'WMS-WO Pallet label-NoOfCopies', 'Value');
				}
				if(rulemapLotSerialItemPrinter)
				{
					printRuleMapRecordCreate('WMS Item Label with Lot or Serial-Printer' , 'custrecord_print_printer' , 'WMS Item Label with Lot or Serial-Printer', 'Text');
				}
				if(rulemapLotSerialItemTemplate)
				{
					printRuleMapRecordCreate('WMS Item Label with Lot or Serial-Template' , 'custrecord_print_template' , 'WMS Item Label with Lot or Serial-Template', 'Text');
				}
				if(rulemapLotSerialItemNoOfCopies)
				{
					printRuleMapRecordCreate('WMS Item Label with Lot or Serial-NoOfCopies' , 'custrecord_print_no_of_copies' , 'WMS Item Label with Lot or Serial-NoOfCopies', 'Value');
				}
				if(rulemapLotSerialPalletPrinter)
				{
					printRuleMapRecordCreate('WMS Pallet Label with Lot or Serial-Printer' , 'custrecord_print_printer' , 'WMS Pallet Label with Lot or Serial-Printer', 'Text');
				}
				if(rulemapLotSerialPalletTemplate)
				{
					printRuleMapRecordCreate('WMS Pallet Label with Lot or Serial-Template' , 'custrecord_print_template' , 'WMS Pallet Label with Lot or Serial-Template', 'Text');
				}
				if(rulemapLotSerialPalletNoOfCopies)
				{
					printRuleMapRecordCreate('WMS Pallet Label with Lot or Serial-NoOfCopies' , 'custrecord_print_no_of_copies' , 'WMS Pallet Label with Lot or Serial-NoOfCopies', 'Value');
				}
				if(rulemapLotSerialWOPalletPrinter)
				{
					printRuleMapRecordCreate('WMS WO Pallet Label with Lot or Serial-Printer' , 'custrecord_print_printer' , 'WMS WO Pallet Label with Lot or Serial-Printer', 'Text');
				}
				if(rulemapLotSerialWOPalletTemplate)
				{
					printRuleMapRecordCreate('WMS WO Pallet Label with Lot or Serial-Template' , 'custrecord_print_template' , 'WMS WO Pallet Label with Lot or Serial-Template', 'Text');
				}
				if(rulemapLotSerialWOPalletNoOfCopies)
				{
					printRuleMapRecordCreate('WMS WO Pallet Label with Lot or Serial-NoOfCopies' , 'custrecord_print_no_of_copies' , 'WMS WO Pallet Label with Lot or Serial-NoOfCopies', 'Value');
				}
				
			}
			catch(ex){
				log.error('Exception while creating Rule Mapping', ex);
			}
		}		
	}

	function printRuleMapRecordCreate(ruleMapName , ruleMapColomnId , ruleGroup, ruleMapColomnType)
	{
		try{
			var ruleMappingrec = record.create({type:'customrecord_print_rule_mappings'
			});
			ruleMappingrec.setValue({fieldId: 'name',   value: ruleMapName});
			ruleMappingrec.setValue({fieldId: 'custrecord_print_item_column_id',   value: ruleMapColomnId});
			ruleMappingrec.setText({fieldId:'custrecord_print_key_rulemap', text:ruleGroup});
			ruleMappingrec.setText({fieldId:'custrecord_print_item_column_type', text:ruleMapColomnType});
			ruleMappingrec.setValue({fieldId:'custrecord_print_inout', value:true});
			ruleMappingrec.setValue({fieldId:'custrecord_print_rm_is_locked', value:true});
			ruleMappingrec.save();
		}
		catch(ex)
		{
			log.error('Rule Map Name:', ruleMapName);
			log.error('Exception while creating Rule Mapping', ex);
		}		
	}

	function createRuleValue()
	{
		// Rule Values
		var recordType = 'customrecord_print_rule_values';
		var columns = [{name: 'custrecord_print_key_rulevalue'},
						{name: 'name'},
						{name: 'custrecord_print_is_default'},
						{name: 'internalid'},
						{name: 'custrecord_print_rv_is_locked'}
						];

		var searchResult = printRecordSearch(recordType, columns);

		if(searchResult.length == 0)
		{
			printRuleValueRecordCreate('WMS-Item label-Printer' , 'WMS-Item label-Printer');
			printRuleValueRecordCreate('WMS-Item label-Template' , 'WMS-Item label-Template','WMS Default Item Label PDF Template');
			printRuleValueRecordCreate('WMS-Item label-NoOfCopies' , 'WMS-Item label-NoOfCopies', '', '1');
			printRuleValueRecordCreate('WMS-Pallet label-Printer' , 'WMS-Pallet label-Printer');
			printRuleValueRecordCreate('WMS-Pallet label-Template' , 'WMS-Pallet label-Template','WMS Default Pallet Label PDF Template');
			printRuleValueRecordCreate('WMS-Pallet label-NoOfCopies' , 'WMS-Pallet label-NoOfCopies', '', '1');
			printRuleValueRecordCreate('WMS-Carton label-Printer' , 'WMS-Carton label-Printer');
			printRuleValueRecordCreate('WMS-Carton label-Template' , 'WMS-Carton label-Template','WMS Default Carton Label PDF Template');
			printRuleValueRecordCreate('WMS-Carton label-NoOfCopies' , 'WMS-Carton label-NoOfCopies', '', '1');
			printRuleValueRecordCreate('WMS-WO Pallet label-Printer' , 'WMS-WO Pallet label-Printer');
			printRuleValueRecordCreate('WMS-WO Pallet label-Template' , 'WMS-WO Pallet label-Template','WMS Default WO Pallet Label PDF Template');
			printRuleValueRecordCreate('WMS-WO Pallet label-NoOfCopies' , 'WMS-WO Pallet label-NoOfCopies', '', '1');
			printRuleValueRecordCreate('WMS Item Label with Lot or Serial-Printer' , 'WMS Item Label with Lot or Serial-Printer');
			printRuleValueRecordCreate('WMS Item Label with Lot or Serial-Template' , 'WMS Item Label with Lot or Serial-Template','WMS Default Item Label with Lot or Serial PDF Template');
			printRuleValueRecordCreate('WMS Item Label with Lot or Serial-NoOfCopies' , 'WMS Item Label with Lot or Serial-NoOfCopies', '', '1');
			printRuleValueRecordCreate('WMS Pallet Label with Lot or Serial-Printer' , 'WMS Pallet Label with Lot or Serial-Printer');
			printRuleValueRecordCreate('WMS Pallet Label with Lot or Serial-Template' , 'WMS Pallet Label with Lot or Serial-Template','WMS Default Pallet Label with Lot or Serial PDF Template');
			printRuleValueRecordCreate('WMS Pallet Label with Lot or Serial-NoOfCopies' , 'WMS Pallet Label with Lot or Serial-NoOfCopies', '', '1');
			printRuleValueRecordCreate('WMS WO Pallet Label with Lot or Serial-Printer' , 'WMS WO Pallet Label with Lot or Serial-Printer');
			printRuleValueRecordCreate('WMS WO Pallet Label with Lot or Serial-Template' , 'WMS WO Pallet Label with Lot or Serial-Template','WMS Default WO Pallet Label with Lot or Serial PDF Template');
			printRuleValueRecordCreate('WMS WO Pallet Label with Lot or Serial-NoOfCopies' , 'WMS WO Pallet Label with Lot or Serial-NoOfCopies', '', '1');
			
			
		}
		else if(searchResult.length > 0)
		{
			var rulevalItemPrinter = true;
			var rulevalItemTemplate = true;
			var rulevalItemNoOfCopies = true;
			var rulevalPalletPrinter = true;
			var rulevalPalletTemplate = true;
			var rulevalPalletNoOfCopies = true;
			var rulevalCartonPrinter = true;
			var rulevalCartonTemplate = true;
			var rulevalCartonNoOfCopies = true;
			var rulevalWOPalletPrinter = true;
			var rulevalWOPalletTemplate = true;
			var rulevalWOPalletNoOfCopies = true;
			var rulevalLotSerialItemPrinter = true;
			var rulevalLotSerialItemTemplate = true;
			var rulevalLotSerialItemNoOfCopies = true;
			var rulevalLotSerialPalletPrinter = true;
			var rulevalLotSerialPalletTemplate = true;
			var rulevalLotSerialPalletNoOfCopies = true;
			var rulevalLotSerialWOPalletPrinter = true;
			var rulevalLotSerialWOPalletTemplate = true;
			var rulevalLotSerialWOPalletNoOfCopies = true;
			for(var i = 0; i< searchResult.length; i++){
				var columnsObject = new Object();
				var internalId = searchResult[i].getValue({name:'internalid'});

				if(searchResult[i].getValue({name:'name'}) == 'ItemLabel-Printer' 
					&& (searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'ItemLabel-Printer' ||
							searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-Item label-Printer')
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true)
				{
					var recToDel = record.delete({type:'customrecord_print_rule_values', id:internalId});

				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-Item label-Printer' 
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-Item label-Printer'
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalItemPrinter = false;
				}


				if(searchResult[i].getValue({name:'name'}) == 'ItemLabel-Template' 
					&& (searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'ItemLabel-Template' || 
							searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-Item label-Template')
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true)
				{
					var recToDel = record.delete({type:'customrecord_print_rule_values', id:internalId});
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-Item label-Template' 
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-Item label-Template'
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalItemTemplate = false;
				}


				if(searchResult[i].getValue({name:'name'}) == 'ItemLabel-NoOfCopies'
					&& (searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'ItemLabel-NoOfCopies' || 
							searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-Item label-NoOfCopies')
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true)
				{
					var recToDel = record.delete({type:'customrecord_print_rule_values', id:internalId});
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-Item label-NoOfCopies'
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-Item label-NoOfCopies'
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalItemNoOfCopies = false;
				}

				if(searchResult[i].getValue({name:'name'}) == 'PalletLabel-Printer' 
					&& (searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'PalletLabel-Printer' || 
							searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-Pallet label-Printer')
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true)
				{
					var recToDel = record.delete({type:'customrecord_print_rule_values', id:internalId});	
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-Pallet label-Printer' 
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-Pallet label-Printer'
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalPalletPrinter = false;
				}

				if(searchResult[i].getValue({name:'name'}) == 'PalletLabel-Template' 
					&& (searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'PalletLabel-Template' || 
							searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-Pallet label-Template')
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true)
				{
					var recToDel = record.delete({type:'customrecord_print_rule_values', id:internalId});	
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-Pallet label-Template' 
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-Pallet label-Template'
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalPalletTemplate = false;
				}

				if(searchResult[i].getValue({name:'name'}) == 'PalletLabel-NoOfCopies' 
					&& (searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'PalletLabel-NoOfCopies' || 
							searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-Pallet label-NoOfCopies')
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true)
				{
					var recToDel = record.delete({type:'customrecord_print_rule_values', id:internalId});	
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-Pallet label-NoOfCopies' 
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-Pallet label-NoOfCopies'
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalPalletNoOfCopies = false;
				}
			
				if(searchResult[i].getValue({name:'name'}) == 'WMS-Carton label-Printer' 
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-Carton label-Printer'
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalCartonPrinter = false;
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-Carton label-Template' 
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-Carton label-Template'
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalCartonTemplate = false;
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-Carton label-NoOfCopies' 
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-Carton label-NoOfCopies'
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalCartonNoOfCopies = false;
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-WO Pallet label-Printer' 
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-WO Pallet label-Printer'
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalWOPalletPrinter = false;
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-WO Pallet label-Template' 
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-WO Pallet label-Template'
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalWOPalletTemplate = false;
				}
				
				if(searchResult[i].getValue({name:'name'}) == 'WMS-WO Pallet label-NoOfCopies' 
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS-WO Pallet label-NoOfCopies'
						&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalWOPalletNoOfCopies = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Item Label with Lot or Serial-Printer'
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS Item Label with Lot or Serial-Printer'
					&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalLotSerialItemPrinter = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Item Label with Lot or Serial-Template'
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS Item Label with Lot or Serial-Template'
					&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalLotSerialItemTemplate = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Item Label with Lot or Serial-NoOfCopies'
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS Item Label with Lot or Serial-NoOfCopies'
					&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalLotSerialItemNoOfCopies = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Pallet Label with Lot or Serial-Printer'
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS Pallet Label with Lot or Serial-Printer'
					&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalLotSerialPalletPrinter = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Pallet Label with Lot or Serial-Template'
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS Pallet Label with Lot or Serial-Template'
					&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalLotSerialPalletTemplate = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS Pallet Label with Lot or Serial-NoOfCopies'
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS Pallet Label with Lot or Serial-NoOfCopies'
					&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalLotSerialPalletNoOfCopies = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS WO Pallet Label with Lot or Serial-Printer'
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS WO Pallet Label with Lot or Serial-Printer'
					&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalLotSerialWOPalletPrinter = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS WO Pallet Label with Lot or Serial-Template'
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS WO Pallet Label with Lot or Serial-Template'
					&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalLotSerialWOPalletTemplate = false;
				}
				if(searchResult[i].getValue({name:'name'}) == 'WMS WO Pallet Label with Lot or Serial-NoOfCopies'
					&& searchResult[i].getText({name:'custrecord_print_key_rulevalue'}) == 'WMS WO Pallet Label with Lot or Serial-NoOfCopies'
					&& searchResult[i].getValue({name:'custrecord_print_is_default'})== true){
					if(searchResult[i].getValue({name:'custrecord_print_rv_is_locked'}) == false)
					{
						columnsObject['custrecord_print_rv_is_locked'] = true;
						printRecordUpdate('customrecord_print_rule_values', internalId, columnsObject);
					}
					rulevalLotSerialWOPalletNoOfCopies = false;
				}

			}

			try{

				if(rulevalItemPrinter)
				{
					printRuleValueRecordCreate('WMS-Item label-Printer' , 'WMS-Item label-Printer');
				}

				if(rulevalItemTemplate)
				{
					printRuleValueRecordCreate('WMS-Item label-Template' , 'WMS-Item label-Template','WMS Default Item Label PDF Template');
				}

				if(rulevalItemNoOfCopies)
				{
					printRuleValueRecordCreate('WMS-Item label-NoOfCopies' , 'WMS-Item label-NoOfCopies', '', '1');
				}

				if(rulevalPalletPrinter)
				{
					printRuleValueRecordCreate('WMS-Pallet label-Printer' , 'WMS-Pallet label-Printer');
				}

				if(rulevalPalletTemplate)
				{
					printRuleValueRecordCreate('WMS-Pallet label-Template' , 'WMS-Pallet label-Template','WMS Default Pallet Label PDF Template');
				}

				if(rulevalPalletNoOfCopies)
				{
					printRuleValueRecordCreate('WMS-Pallet label-NoOfCopies' , 'WMS-Pallet label-NoOfCopies', '', '1');
				}
				
				if(rulevalCartonPrinter)
				{
					printRuleValueRecordCreate('WMS-Carton label-Printer' , 'WMS-Carton label-Printer');
				}

				if(rulevalCartonTemplate)
				{
					printRuleValueRecordCreate('WMS-Carton label-Template' , 'WMS-Carton label-Template','WMS Default Carton Label PDF Template');
				}

				if(rulevalCartonNoOfCopies)
				{
					printRuleValueRecordCreate('WMS-Carton label-NoOfCopies' , 'WMS-Carton label-NoOfCopies', '', '1');
				}

				if(rulevalWOPalletPrinter)
				{
					printRuleValueRecordCreate('WMS-WO Pallet label-Printer' , 'WMS-WO Pallet label-Printer');
				}

				if(rulevalWOPalletTemplate)
				{
					printRuleValueRecordCreate('WMS-WO Pallet label-Template' , 'WMS-WO Pallet label-Template','WMS Default WO Pallet Label PDF Template');
				}

				if(rulevalWOPalletNoOfCopies)
				{
					printRuleValueRecordCreate('WMS-WO Pallet label-NoOfCopies' , 'WMS-WO Pallet label-NoOfCopies', '', '1');
				}
				if(rulevalLotSerialItemPrinter)
				{
					printRuleValueRecordCreate('WMS Item Label with Lot or Serial-Printer' , 'WMS Item Label with Lot or Serial-Printer');
				}
				if(rulevalLotSerialItemTemplate)
				{
					printRuleValueRecordCreate('WMS Item Label with Lot or Serial-Template' , 'WMS Item Label with Lot or Serial-Template','WMS Default Item Label with Lot or Serial PDF Template');
				}
				if(rulevalLotSerialItemNoOfCopies)
				{
					printRuleValueRecordCreate('WMS Item Label with Lot or Serial-NoOfCopies' , 'WMS Item Label with Lot or Serial-NoOfCopies', '', '1');
				}
				if(rulevalLotSerialPalletPrinter)
				{
					printRuleValueRecordCreate('WMS Pallet Label with Lot or Serial-Printer' , 'WMS Pallet Label with Lot or Serial-Printer');
				}
				if(rulevalLotSerialPalletTemplate)
				{
					printRuleValueRecordCreate('WMS Pallet Label with Lot or Serial-Template' , 'WMS Pallet Label with Lot or Serial-Template','WMS Default Pallet Label with Lot or Serial PDF Template');
				}
				if(rulevalLotSerialPalletNoOfCopies)
				{
					printRuleValueRecordCreate('WMS Pallet Label with Lot or Serial-NoOfCopies' , 'WMS Pallet Label with Lot or Serial-NoOfCopies', '', '1');
				}
				if(rulevalLotSerialWOPalletPrinter)
				{
					printRuleValueRecordCreate('WMS WO Pallet Label with Lot or Serial-Printer' , 'WMS WO Pallet Label with Lot or Serial-Printer');
				}
				if(rulevalLotSerialWOPalletTemplate)
				{
					printRuleValueRecordCreate('WMS WO Pallet Label with Lot or Serial-Template' , 'WMS WO Pallet Label with Lot or Serial-Template','WMS Default WO Pallet Label with Lot or Serial PDF Template');
				}
				if(rulevalLotSerialWOPalletNoOfCopies)
				{
					printRuleValueRecordCreate('WMS WO Pallet Label with Lot or Serial-NoOfCopies' , 'WMS WO Pallet Label with Lot or Serial-NoOfCopies', '', '1');
				}


			}
			catch(ex){
				log.error('Exception while creating Rule Values', ex);
			}
		}
	}

	function printRuleValueRecordCreate(ruleValueName , ruleValueKey , template, noOfCopies)
	{
		try{
			var ruleValuerec = record.create({type:'customrecord_print_rule_values'
			});
			ruleValuerec.setValue({fieldId: 'name',   value: ruleValueName});
			ruleValuerec.setText({fieldId: 'custrecord_print_key_rulevalue',   text: ruleValueKey});
			ruleValuerec.setValue({fieldId: 'custrecord_print_is_default',   value: true});
			ruleValuerec.setValue({fieldId: 'custrecord_print_rv_is_locked',   value: true});

			if(template!='' && template!=null)
				ruleValuerec.setText({fieldId: 'custrecord_print_template',   text: template});

			if(noOfCopies!='' && noOfCopies!=null)
				ruleValuerec.setValue({fieldId: 'custrecord_print_no_of_copies',   value: noOfCopies});

			ruleValuerec.save();
		}
		catch(ex)
		{
			log.error('Rule Value Name:', ruleValueName);
			log.error('Exception while creating Rule Values', ex);
		}
	}
	function printRecordSearch(recordType, columnArray)
	{
		var printRecSearch = search.create({
			type: recordType,
			columns: columnArray
		});

		var searchResult = [];
		var search_page_count = 1000;
		var myPagedData = printRecSearch.runPaged({
			pageSize: search_page_count
		});
		myPagedData.pageRanges.forEach(function (pageRange) {
			var myPage = myPagedData.fetch({
				index: pageRange.index
			});
			myPage.data.forEach(function (result) {
				searchResult.push(result);
			});
		});

		return searchResult;
	}
	function printRecordUpdate(recordType, recordId, recordDataObject)
	{
		record.submitFields({
			type: recordType,
			id: recordId,
			values:recordDataObject
		});
	}

	function removeRuleValueFields(recId)
	{
		// Load the Print-RuleValue CustomRecord Type.
		var ruleValue = record.load({
			type: 'customrecordtype',
			id: recId
		});

		// Count of custom fields in the Print - Rule Value record Type
		var fieldSublistLength = ruleValue.getLineCount({sublistId: 'customfield'});
		log.debug('Fields count', fieldSublistLength);

		// List of custom fields that would be dropped
		var custFieldsToDrop = ['custrecord_print_wms_item', 'custrecord_print_wms_item_family', 'custrecord_print_wms_item_group', 'custrecord_print_wms_location', 'custrecord_print_wms_user']

		var idToDelete = []
		for (var i = 0; i < fieldSublistLength; i++) 
		{
			var scriptId = ruleValue.getSublistValue({sublistId: 'customfield', fieldId: 'fieldcustcodeid', line: i});
			log.debug('scriptId :', scriptId);

			if (custFieldsToDrop.indexOf(scriptId) >= 0) {
				var id = ruleValue.getSublistValue({sublistId: 'customfield', fieldId: 'fieldid', line: i});
				idToDelete.push(id)
			}
		}

		for(var x=0; x<idToDelete.length; x++)
		{
			try {
				record.delete({
					type: 'customrecordcustomfield',
					id: idToDelete[x]
				});
			} catch (ex) {
				log.debug("Exception while Custom Fields being dropped: " + ex)
			}
		}

	}	


	function isMultiLanguageEnabled() {
		var vResult = false;
		try {
			var MultiLanguageFeature = runtime.isFeatureInEffect({
				feature: 'multilanguage' 
			});

			if (MultiLanguageFeature != null && MultiLanguageFeature != '' && MultiLanguageFeature != 'null' &&
					MultiLanguageFeature != 'undefined' && MultiLanguageFeature != false) {
				vResult = true;
			}
		}
		catch (e) {
			log.error({
				title: 'exception in MultiLanguageFeature',details: e});
			vResult = false;
		}
		log.debug({title:'isEnabled in isMultiLanguageEnabled',details:vResult});
		return vResult;
	}
	function insertDataInTransalationTab(wmsTempSystemRuleRec,newsystemrule)
	{
		var languageCountOfTempSysRule = wmsTempSystemRuleRec.getLineCount({
			sublistId: 'translations'
		});
		var languageCountOfWMSSysRule = newsystemrule.getLineCount({
			sublistId: 'translations'
		});                   
		for (var TempSysRuleItr = 0; TempSysRuleItr < languageCountOfTempSysRule; TempSysRuleItr++) {
			var localeOfTemSystemRule = wmsTempSystemRuleRec.getSublistValue({
				sublistId: 'translations',
				fieldId: 'locale',
				line: TempSysRuleItr
			});
			var LabelofTempSystemRule = wmsTempSystemRuleRec.getSublistValue({
				sublistId: 'translations',
				fieldId: 'label',
				line: TempSysRuleItr
			});
			if(LabelofTempSystemRule != null && LabelofTempSystemRule != '')
			{
				for (var WMSSysRuleItr = 0; WMSSysRuleItr < languageCountOfWMSSysRule; WMSSysRuleItr++) {
					var WMSlocale = newsystemrule.getSublistValue({
						sublistId: 'translations',
						fieldId: 'locale',
						line: WMSSysRuleItr
					});
					if(WMSlocale == localeOfTemSystemRule)
					{
						newsystemrule.setSublistValue({
							sublistId: 'translations',
							fieldId: 'label',
							line: WMSSysRuleItr,
							value: LabelofTempSystemRule
						});
						break;
					}
				}
			}
		}
	}

	function ASNDeploymentUpdate(isEnabled)
	{

		var ASNruleValue=getSystemRuleValue();
		var oldDeployment;
		var newDeployment;


		if(isEnabled && ASNruleValue =='Y')
		{
			oldDeployment=false
			newDeployment=true
		}
		else if(isEnabled && ASNruleValue =='N')
		{
			oldDeployment=false
			newDeployment=false
		}
		else if(!isEnabled && ASNruleValue =='Y')
		{
			oldDeployment=true
			newDeployment=false
		}
		else
		{
			oldDeployment=false
			newDeployment=false
		}



		var scrdeploymentASNsch=search.create({
			type: search.Type.SCRIPT_DEPLOYMENT,
			filters:[
				search.createFilter({
					name: 'scriptid',
					operator: 'is',
					values: 'customdeploy_wms_asnedigeneration'
				})
				]
		});
		var result=scrdeploymentASNsch.run().getRange({
			start: 0,
			end: 1
		}) || [];
		if(result.length>0){
			var menuDeploymentASNsch=record.load({
				type: record.Type.SCRIPT_DEPLOYMENT,
				id: result[0].id
			});
			menuDeploymentASNsch.setValue({
				fieldId:'isdeployed',
				value:newDeployment,
				ignoreFieldChange: true
			});
			menuDeploymentASNsch.save();
		}		


		var scrdeploymentASNschold=search.create({
			type: search.Type.SCRIPT_DEPLOYMENT,
			filters:[
				search.createFilter({
					name: 'scriptid',
					operator: 'is',
					values: 'customdeploy_wmsse_asncconfirmation_sch'
				})
				]
		});
		var result=scrdeploymentASNschold.run().getRange({
			start: 0,
			end: 1
		}) || [];
		if(result.length>0){
			var menuDeploymentASNschold=record.load({
				type: record.Type.SCRIPT_DEPLOYMENT,
				id: result[0].id
			});
			menuDeploymentASNschold.setValue({
				fieldId:'isdeployed',
				value:oldDeployment,
				ignoreFieldChange: true
			});
			menuDeploymentASNschold.save();
		}		

	}


	function getSystemRuleValue() {
		var systemrulevalue = 'N';
		var RuleId='Generate EDI 856 outbound ASNs?'
			try {			

				var searchRec = search.load({
					id: 'customsearch_wmsse_sys_rules'
				});
				var filters = searchRec.filters;
				filters.push(search.createFilter({
					name: 'name',
					operator: search.Operator.IS,
					values: RuleId.toString()
				}), search.createFilter({
					name: 'isinactive',
					operator: search.Operator.IS,
					values: false
				}));


				searchRec.filters = filters;
				searchresults = _getSearchResultInJSON(searchRec);
				if (searchresults.length > 0) {
					if (searchresults[0]['custrecord_wmsserulevalue'] != null &&
							searchresults[0]['custrecord_wmsserulevalue'] != '') {
						systemrulevalue = searchresults[0]['custrecord_wmsserulevalue'];
					}
				}
			}
		catch (exp) {
			log.error('expception', exp);
			return systemrulevalue;
		}
		return systemrulevalue;
	}

	function updateUccLabelTemplateData()
	{
		var labelTemplateSrch = search.create({
			type: 'customrecord_wmsse_label_template',
			columns: [{name: 'name'},
			          {name: 'custrecord_wmsse_labeltemplate_type'},
			          {name: 'internalid', sort: search.Sort.ASC}],
			filters: [{name: 'name',
			           operator: 'is',
			           values: ['UCCLABEL']
			          },
			          {
			        	  name: 'custrecord_wmsse_labeltemplate_type',
			        	  operator: 'is',
			        	  values: ['ZEBRALABEL']
			          }
			          ]
		});

		var searchResult = [];
		var search_page_count = 10;
		var myPageData = labelTemplateSrch.runPaged({
			pageSize: search_page_count
		});
		myPageData.pageRanges.forEach(function (pageRange) {
			var myPage = myPageData.fetch({
				index: pageRange.index
			});
			myPage.data.forEach(function (result) {
				searchResult.push(result);
			});
		});

		if(searchResult.length > 0)
		{

			 var templateData = '^XA\n'+
				'^SZ2\n'+
				'^PR12^FS\n'+
				'^LH0,0\n'+
				'^LL1225\n'+
				'^FWN\n'+
				'^BY2,2\n'+
				'^FO20,20^A0N,25,25^FDFROM:^FS\n'+
				'^FO20,50^A0N,25,25^FD parameter14 ^FS\n'+
				'^FO20,80^A0N,25,25^FD parameter08, parameter09 ^FS\n'+
				'^FO20,110^A0N,25,25^FD parameter10 parameter11 parameter12 parameter13 ^FS\n'+
				'^FO380,20^A0N,25,25^FD SHIP TO:^FS\n'+
				'^FO380,50^A0N,25,25^FD parameter07 ^FS\n'+
				'^FO380,80^A0N,25,25^FD parameter01 ^FS\n'+
				'^FO380,110^A0N,25,25^FD parameter02 ^FS\n'+
				'^FO380,140^A0N,25,25^FD parameter03^FS\n'+
				'^FO380,170^A0N,25,25^FD parameter04 parameter05 parameter06 ^FS\n'+
				'^FO0,222^GB812,0,3^FS\n'+
				'^FO0,445^GB812,0,3^FS\n'+
				'^FO375,0^GB0,222,3^FS\n'+
				'^FO375,222^GB0,223,3^FS\n'+
				'^FO20,230^A0N,25,20^FDSHIP TO POSTAL CODE^FS\n'+
				'^FO20,260^A0N,25,20^FD (420)parameter06^FS\n'+
				'^FO50,310^BCN,80,N,N,N,N^FD>;420 parameter06^FS\n'+
				'^FO380,230^A0N,40,25^FDCARRIER: parameter15^FS\n'+
				'^FO380,280^A0N,40,25^FD^FS\n'+
				'^FO380,330^A0N,60,40^FDBOL: ^FS\n'+
				'^FO260,740^A0N,60,40^FD 1 OF 1 ^FS\n'+
				'^FO20,480^A0N,30,30^FDPO #: parameter14^FS\n'+
				'^FO190,470^A0N,40,25^FD ^FS\n'+
				'^FO20,530^A0N,30,30^FDSKU:^FS\n'+
				'^FO90,520^A0N,40,25^FD parameter17^FS\n'+
				'^FO0,800^GB812,0,0^FS\n'+
				'^FO20,810^A0N,20,20^FDSerial Shipping Container Code^FS\n'+
				'^FO50,840^BY4^BCN,256,Y,N,Y,N^FD>;>800parameter18^FS\n'+
				'^XZ';

			for(var i=0; i<1 ; i++)
			{
				if(searchResult[i].getValue({name : 'name'}) == 'UCCLABEL')
				{
					var labelRec = record.load({
						type: 'customrecord_wmsse_label_template',
						id: searchResult[i].getValue({name : 'internalid'})
					});

					labelRec.setValue({
						fieldId: 'custrecord_wmsse_labeltemplate_data',
						value: templateData
					});
					labelRec.save();
				}
			}
		}
	}
	
		function _getSearchResultInJSON(searchObj, callback, callbackResultObj) {
		// if callback and callbackResultObj are undefined, default behaviour is
		// 1 result -> 1 object
		if (callback == undefined || callback == '') {
			callback = _searchResultToJson;
		}
		if (callbackResultObj == undefined) {
			callbackResultObj = []; // initialize as array
		}
		var search_page_count = 1000;
		var myPagedData = searchObj.runPaged({
			pageSize: search_page_count
		});
		myPagedData.pageRanges.forEach(function (pageRange) {
			var myPage = myPagedData.fetch({
				index: pageRange.index
			});
			myPage.data.forEach(function (result) {
				// get json of result
				callback(result,callbackResultObj);
			});
		});
		return callbackResultObj;
	}
	/**
	 * Converts Search result to JSON object
	 * 
	 * @param searchResult
	 *            each search result object
	 * @returns {Array} JSON equivalent of search object
	 */
	function _searchResultToJson(searchResult, searchResults) {
		var resultObj = {};
		var columnsArray = searchResult.columns;
		var columnKeys =[];
		for (var j in columnsArray) {
			var columnObj = JSON.parse(JSON.stringify(columnsArray[j]));
			var column = columnObj.name;
			var columnSummary = columnObj.summary;
			var columnLabel = columnObj.label;
			var columnJoin = columnObj.join;
			var columnType = columnObj.type;
			if (column == 'formulanumeric' || column == 'formuladate' || column == 'formulatext') {
				var columnValue = searchResult.getValue(columnsArray[j]);
				resultObj[columnLabel] = columnValue;
			}
			else {
				var columnValue = searchResult.getValue({
					name: column,
					summary: columnSummary,
					join: columnJoin
				});
				if(columnKeys.indexOf(column) != -1)
				{
					columnKeys.push(columnLabel);
					resultObj[columnLabel] = columnValue;
				}
				else
				{
					columnKeys.push(column);
					resultObj[column] = columnValue;
				}
				if (columnType == 'select' || column == 'unit'  || typeof columnObj == 'object') {
					if(columnValue!= '')
					{
						var columnText = searchResult.getText({
							name: column,
							summary: columnSummary,
							join: columnJoin
						});
						var colName = column + "Text";
						resultObj[colName] = columnText;
					}
					else
					{
						var colName = column + "Text";
						resultObj[colName] = '';	
					}                                             
				}
			}

			resultObj['id'] = searchResult.id;
			resultObj['recordType'] = searchResult.recordType;
		}
		searchResults.push(resultObj);
	}
	
	
	function updateMRScriptDeploymentConcurrencyLimit()
	{
		try
		{
			var mrScriptSearch = query.create({
				type: 'script'
			});
			var scriptSearchFilter = mrScriptSearch.createCondition({
				fieldId: 'name',
				operator: query.Operator.ANY_OF,
				values: ['WMS Outbound Stage Bin Update Map Reduce','WMS Packing MapReduce']
			});
			mrScriptSearch.columns = [
				mrScriptSearch.createColumn({
					fieldId: 'id',
					alias: 'id'
				})
				];
			mrScriptSearch.condition = mrScriptSearch.and(scriptSearchFilter);
			var mrScriptResults = mrScriptSearch.run().asMappedResults();
			log.debug('mrScriptResults',mrScriptResults);
			if(mrScriptResults !=null && mrScriptResults.length>0){
				for (var index in mrScriptResults) {				
					var scriptInternalId = mrScriptResults[index]['id'];
					updateDeploymentCocurrencyLimit(scriptInternalId);
				}
			}
		}
		catch(e)
		{
			log.debug('exception in updateMRScriptDeploymentConcurrencyLimit',e);
		}
	}
	

	function updateDeploymentCocurrencyLimit(scriptInternalId) {
		try
		{			
			var mrScriptDeploymentSearch=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
					search.createFilter({
						name: 'script',
						operator: 'anyof',
						values: scriptInternalId
					})
					]
			});
			var result=mrScriptDeploymentSearch.run().getRange({
				start: 0,
				end: 100
			}) || [];

			if(result.length>0){
				for(var i = 0; i< result.length; i++){					
					record.submitFields({
						type: record.Type.SCRIPT_DEPLOYMENT,
						id: result[i].id,
						values: {
							concurrencylimit: ''
						}
					});
				}
			}
		}
		catch(e)
		{
			log.error('exception in updateDeploymentCocurrencyLimit', e);
		}
	}
	function updateUEScriptDeploymentsToInactive() {
		try
		{	var deploymentId = ['customdeploy_wmsse_inventorystatus_ue',
		                        'customdeploy_wmsse_inventory_transfer_ue',
		                        'customscript_wmsse_statuschange_restrict',
		                        'customdeploy_wmsse_pickstratagies_status',
		                        'customdeploy_wmsse_inv_adj_ue',
		                        'customdeploy_wmsse_postingfulfillment_ue',
		                        'customdeploy_wmsse_bin_transfer_ue',
		                        'customdeploy1',
		                        'customdeploy_wms_inventory_status_ue_di'
		                        ];
			var scriptDeploymentSearch=search.create({
				type: search.Type.SCRIPT_DEPLOYMENT,
				filters:[
					search.createFilter({
						name: 'scriptid',
						operator: query.Operator.ANY_OF,
						values: deploymentId
					})
					]
			});
			var result=scriptDeploymentSearch.run().getRange({
				start: 0,
				end: 100
			}) || [];

			if(result.length>0){
				for(var i = 0; i< result.length; i++){					
					record.submitFields({
						type: record.Type.SCRIPT_DEPLOYMENT,
						id: result[i].id,
						values: {
							isdeployed: false
						}
					});
				}
			}
		}
		catch(e)
		{
			log.error('exception in updateUEScriptDeploymentsToInactive', e);
		}
	}
	


	return {
		afterInstall: function afterInstall(params) {
			var newBundleinstall = true;
			doBundleAfterInstall(newBundleinstall);
		},
		afterUpdate: function afterUpdate(params) {
			doBundleUpdates();
		}
	};
});
